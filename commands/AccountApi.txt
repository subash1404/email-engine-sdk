/*
 * EmailEngine
 * You will need an Access Token to use this API (generate one <a href=\"/admin/tokens\" target=\"_parent\">here</a>).  When making API calls remember that requests against the same account are queued and not executed in parallel. If a previous request takes too much time to finish, a queued request might time out before EmailEngine can run it.
 *
 * The version of the OpenAPI document: 2.42.0
 * Contact: info@emailengine.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountResponse;
import org.openapitools.client.model.AccountTokenResponse;
import org.openapitools.client.model.AccountsFilterResponse;
import org.openapitools.client.model.CreateAccount;
import org.openapitools.client.model.CreateAccountResponse;
import org.openapitools.client.model.DeleteRequestResponse;
import org.openapitools.client.model.Model14;
import org.openapitools.client.model.RequestAuthForm;
import org.openapitools.client.model.RequestAuthFormResponse;
import org.openapitools.client.model.RequestFlush;
import org.openapitools.client.model.RequestFlushResponse;
import org.openapitools.client.model.RequestReconnect;
import org.openapitools.client.model.RequestReconnectResponse;
import org.openapitools.client.model.RequestSync;
import org.openapitools.client.model.RequestSyncResponse;
import org.openapitools.client.model.UpdateAccount;
import org.openapitools.client.model.VerifyAccount;
import org.openapitools.client.model.VerifyAccountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV1AccountAccount
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV1AccountAccountCall(String account, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{account}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV1AccountAccountValidateBeforeCall(String account, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling deleteV1AccountAccount(Async)");
        }

        return deleteV1AccountAccountCall(account, xEeTimeout, _callback);

    }

    /**
     * Remove synced account
     * Stop syncing IMAP account and delete cached values
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return DeleteRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestResponse deleteV1AccountAccount(String account, Integer xEeTimeout) throws ApiException {
        ApiResponse<DeleteRequestResponse> localVarResp = deleteV1AccountAccountWithHttpInfo(account, xEeTimeout);
        return localVarResp.getData();
    }

    /**
     * Remove synced account
     * Stop syncing IMAP account and delete cached values
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return ApiResponse&lt;DeleteRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRequestResponse> deleteV1AccountAccountWithHttpInfo(String account, Integer xEeTimeout) throws ApiException {
        okhttp3.Call localVarCall = deleteV1AccountAccountValidateBeforeCall(account, xEeTimeout, null);
        Type localVarReturnType = new TypeToken<DeleteRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove synced account (asynchronously)
     * Stop syncing IMAP account and delete cached values
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV1AccountAccountAsync(String account, Integer xEeTimeout, final ApiCallback<DeleteRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV1AccountAccountValidateBeforeCall(account, xEeTimeout, _callback);
        Type localVarReturnType = new TypeToken<DeleteRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV1AccountAccount
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param quota If true, then include quota information in the response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1AccountAccountCall(String account, Integer xEeTimeout, Boolean quota, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{account}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quota != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quota", quota));
        }

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV1AccountAccountValidateBeforeCall(String account, Integer xEeTimeout, Boolean quota, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getV1AccountAccount(Async)");
        }

        return getV1AccountAccountCall(account, xEeTimeout, quota, _callback);

    }

    /**
     * Get account info
     * Returns stored information about the account. Passwords are not included.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param quota If true, then include quota information in the response (optional, default to false)
     * @return AccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public AccountResponse getV1AccountAccount(String account, Integer xEeTimeout, Boolean quota) throws ApiException {
        ApiResponse<AccountResponse> localVarResp = getV1AccountAccountWithHttpInfo(account, xEeTimeout, quota);
        return localVarResp.getData();
    }

    /**
     * Get account info
     * Returns stored information about the account. Passwords are not included.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param quota If true, then include quota information in the response (optional, default to false)
     * @return ApiResponse&lt;AccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResponse> getV1AccountAccountWithHttpInfo(String account, Integer xEeTimeout, Boolean quota) throws ApiException {
        okhttp3.Call localVarCall = getV1AccountAccountValidateBeforeCall(account, xEeTimeout, quota, null);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account info (asynchronously)
     * Returns stored information about the account. Passwords are not included.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param quota If true, then include quota information in the response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1AccountAccountAsync(String account, Integer xEeTimeout, Boolean quota, final ApiCallback<AccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV1AccountAccountValidateBeforeCall(account, xEeTimeout, quota, _callback);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV1AccountAccountOauthtoken
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1AccountAccountOauthtokenCall(String account, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/{account}/oauth-token"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV1AccountAccountOauthtokenValidateBeforeCall(String account, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getV1AccountAccountOauthtoken(Async)");
        }

        return getV1AccountAccountOauthtokenCall(account, xEeTimeout, _callback);

    }

    /**
     * Get OAuth2 access token
     * Get the active OAuth2 access token for an account. NB! This endpoint is disabled by default and needs activation on the Service configuration page.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return AccountTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public AccountTokenResponse getV1AccountAccountOauthtoken(String account, Integer xEeTimeout) throws ApiException {
        ApiResponse<AccountTokenResponse> localVarResp = getV1AccountAccountOauthtokenWithHttpInfo(account, xEeTimeout);
        return localVarResp.getData();
    }

    /**
     * Get OAuth2 access token
     * Get the active OAuth2 access token for an account. NB! This endpoint is disabled by default and needs activation on the Service configuration page.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return ApiResponse&lt;AccountTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTokenResponse> getV1AccountAccountOauthtokenWithHttpInfo(String account, Integer xEeTimeout) throws ApiException {
        okhttp3.Call localVarCall = getV1AccountAccountOauthtokenValidateBeforeCall(account, xEeTimeout, null);
        Type localVarReturnType = new TypeToken<AccountTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get OAuth2 access token (asynchronously)
     * Get the active OAuth2 access token for an account. NB! This endpoint is disabled by default and needs activation on the Service configuration page.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1AccountAccountOauthtokenAsync(String account, Integer xEeTimeout, final ApiCallback<AccountTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV1AccountAccountOauthtokenValidateBeforeCall(account, xEeTimeout, _callback);
        Type localVarReturnType = new TypeToken<AccountTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV1Accounts
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param page Page number (zero indexed, so use 0 for first page) (optional, default to 0)
     * @param pageSize How many entries per page (optional, default to 20)
     * @param state Filter accounts by state (optional)
     * @param query Filter accounts by string match (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1AccountsCall(Integer xEeTimeout, Integer page, Integer pageSize, String state, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV1AccountsValidateBeforeCall(Integer xEeTimeout, Integer page, Integer pageSize, String state, String query, final ApiCallback _callback) throws ApiException {
        return getV1AccountsCall(xEeTimeout, page, pageSize, state, query, _callback);

    }

    /**
     * List accounts
     * Lists registered accounts
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param page Page number (zero indexed, so use 0 for first page) (optional, default to 0)
     * @param pageSize How many entries per page (optional, default to 20)
     * @param state Filter accounts by state (optional)
     * @param query Filter accounts by string match (optional)
     * @return AccountsFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public AccountsFilterResponse getV1Accounts(Integer xEeTimeout, Integer page, Integer pageSize, String state, String query) throws ApiException {
        ApiResponse<AccountsFilterResponse> localVarResp = getV1AccountsWithHttpInfo(xEeTimeout, page, pageSize, state, query);
        return localVarResp.getData();
    }

    /**
     * List accounts
     * Lists registered accounts
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param page Page number (zero indexed, so use 0 for first page) (optional, default to 0)
     * @param pageSize How many entries per page (optional, default to 20)
     * @param state Filter accounts by state (optional)
     * @param query Filter accounts by string match (optional)
     * @return ApiResponse&lt;AccountsFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsFilterResponse> getV1AccountsWithHttpInfo(Integer xEeTimeout, Integer page, Integer pageSize, String state, String query) throws ApiException {
        okhttp3.Call localVarCall = getV1AccountsValidateBeforeCall(xEeTimeout, page, pageSize, state, query, null);
        Type localVarReturnType = new TypeToken<AccountsFilterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List accounts (asynchronously)
     * Lists registered accounts
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param page Page number (zero indexed, so use 0 for first page) (optional, default to 0)
     * @param pageSize How many entries per page (optional, default to 20)
     * @param state Filter accounts by state (optional)
     * @param query Filter accounts by string match (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1AccountsAsync(Integer xEeTimeout, Integer page, Integer pageSize, String state, String query, final ApiCallback<AccountsFilterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV1AccountsValidateBeforeCall(xEeTimeout, page, pageSize, state, query, _callback);
        Type localVarReturnType = new TypeToken<AccountsFilterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV1Changes
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1ChangesCall(Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV1ChangesValidateBeforeCall(Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        return getV1ChangesCall(xEeTimeout, _callback);

    }

    /**
     * Stream state changes
     * Stream account state changes as an EventSource
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public String getV1Changes(Integer xEeTimeout) throws ApiException {
        ApiResponse<String> localVarResp = getV1ChangesWithHttpInfo(xEeTimeout);
        return localVarResp.getData();
    }

    /**
     * Stream state changes
     * Stream account state changes as an EventSource
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getV1ChangesWithHttpInfo(Integer xEeTimeout) throws ApiException {
        okhttp3.Call localVarCall = getV1ChangesValidateBeforeCall(xEeTimeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream state changes (asynchronously)
     * Stream account state changes as an EventSource
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1ChangesAsync(Integer xEeTimeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV1ChangesValidateBeforeCall(xEeTimeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV1Account
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1AccountCall(Integer xEeTimeout, CreateAccount body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV1AccountValidateBeforeCall(Integer xEeTimeout, CreateAccount body, final ApiCallback _callback) throws ApiException {
        return postV1AccountCall(xEeTimeout, body, _callback);

    }

    /**
     * Register new account
     * Registers new IMAP account to be synced
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return CreateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountResponse postV1Account(Integer xEeTimeout, CreateAccount body) throws ApiException {
        ApiResponse<CreateAccountResponse> localVarResp = postV1AccountWithHttpInfo(xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Register new account
     * Registers new IMAP account to be synced
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;CreateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountResponse> postV1AccountWithHttpInfo(Integer xEeTimeout, CreateAccount body) throws ApiException {
        okhttp3.Call localVarCall = postV1AccountValidateBeforeCall(xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register new account (asynchronously)
     * Registers new IMAP account to be synced
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1AccountAsync(Integer xEeTimeout, CreateAccount body, final ApiCallback<CreateAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV1AccountValidateBeforeCall(xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV1AuthenticationForm
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1AuthenticationFormCall(Integer xEeTimeout, RequestAuthForm body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/authentication/form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV1AuthenticationFormValidateBeforeCall(Integer xEeTimeout, RequestAuthForm body, final ApiCallback _callback) throws ApiException {
        return postV1AuthenticationFormCall(xEeTimeout, body, _callback);

    }

    /**
     * Generate authentication link
     * Generates a redirect link to the hosted authentication form
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return RequestAuthFormResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public RequestAuthFormResponse postV1AuthenticationForm(Integer xEeTimeout, RequestAuthForm body) throws ApiException {
        ApiResponse<RequestAuthFormResponse> localVarResp = postV1AuthenticationFormWithHttpInfo(xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Generate authentication link
     * Generates a redirect link to the hosted authentication form
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;RequestAuthFormResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestAuthFormResponse> postV1AuthenticationFormWithHttpInfo(Integer xEeTimeout, RequestAuthForm body) throws ApiException {
        okhttp3.Call localVarCall = postV1AuthenticationFormValidateBeforeCall(xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<RequestAuthFormResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate authentication link (asynchronously)
     * Generates a redirect link to the hosted authentication form
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1AuthenticationFormAsync(Integer xEeTimeout, RequestAuthForm body, final ApiCallback<RequestAuthFormResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV1AuthenticationFormValidateBeforeCall(xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<RequestAuthFormResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV1Verifyaccount
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1VerifyaccountCall(Integer xEeTimeout, VerifyAccount body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/verifyAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV1VerifyaccountValidateBeforeCall(Integer xEeTimeout, VerifyAccount body, final ApiCallback _callback) throws ApiException {
        return postV1VerifyaccountCall(xEeTimeout, body, _callback);

    }

    /**
     * Verify IMAP and SMTP settings
     * Checks if can connect and authenticate using provided account info
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return VerifyAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public VerifyAccountResponse postV1Verifyaccount(Integer xEeTimeout, VerifyAccount body) throws ApiException {
        ApiResponse<VerifyAccountResponse> localVarResp = postV1VerifyaccountWithHttpInfo(xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Verify IMAP and SMTP settings
     * Checks if can connect and authenticate using provided account info
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;VerifyAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyAccountResponse> postV1VerifyaccountWithHttpInfo(Integer xEeTimeout, VerifyAccount body) throws ApiException {
        okhttp3.Call localVarCall = postV1VerifyaccountValidateBeforeCall(xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<VerifyAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify IMAP and SMTP settings (asynchronously)
     * Checks if can connect and authenticate using provided account info
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1VerifyaccountAsync(Integer xEeTimeout, VerifyAccount body, final ApiCallback<VerifyAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV1VerifyaccountValidateBeforeCall(xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<VerifyAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV1AccountAccount
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountCall(String account, Integer xEeTimeout, UpdateAccount body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/account/{account}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV1AccountAccountValidateBeforeCall(String account, Integer xEeTimeout, UpdateAccount body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling putV1AccountAccount(Async)");
        }

        return putV1AccountAccountCall(account, xEeTimeout, body, _callback);

    }

    /**
     * Update account info
     * Updates account information
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return Model14
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public Model14 putV1AccountAccount(String account, Integer xEeTimeout, UpdateAccount body) throws ApiException {
        ApiResponse<Model14> localVarResp = putV1AccountAccountWithHttpInfo(account, xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Update account info
     * Updates account information
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Model14&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model14> putV1AccountAccountWithHttpInfo(String account, Integer xEeTimeout, UpdateAccount body) throws ApiException {
        okhttp3.Call localVarCall = putV1AccountAccountValidateBeforeCall(account, xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<Model14>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update account info (asynchronously)
     * Updates account information
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountAsync(String account, Integer xEeTimeout, UpdateAccount body, final ApiCallback<Model14> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV1AccountAccountValidateBeforeCall(account, xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<Model14>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV1AccountAccountFlush
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountFlushCall(String account, Integer xEeTimeout, RequestFlush body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/account/{account}/flush"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV1AccountAccountFlushValidateBeforeCall(String account, Integer xEeTimeout, RequestFlush body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling putV1AccountAccountFlush(Async)");
        }

        return putV1AccountAccountFlushCall(account, xEeTimeout, body, _callback);

    }

    /**
     * Request account flush
     * Deletes all email indexes from Redis and ElasticSearch and re-creates the index for that account. You can only run a single flush operation at a time, so you must wait until the previous flush has finished before initiating a new one.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return RequestFlushResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public RequestFlushResponse putV1AccountAccountFlush(String account, Integer xEeTimeout, RequestFlush body) throws ApiException {
        ApiResponse<RequestFlushResponse> localVarResp = putV1AccountAccountFlushWithHttpInfo(account, xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Request account flush
     * Deletes all email indexes from Redis and ElasticSearch and re-creates the index for that account. You can only run a single flush operation at a time, so you must wait until the previous flush has finished before initiating a new one.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;RequestFlushResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestFlushResponse> putV1AccountAccountFlushWithHttpInfo(String account, Integer xEeTimeout, RequestFlush body) throws ApiException {
        okhttp3.Call localVarCall = putV1AccountAccountFlushValidateBeforeCall(account, xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<RequestFlushResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request account flush (asynchronously)
     * Deletes all email indexes from Redis and ElasticSearch and re-creates the index for that account. You can only run a single flush operation at a time, so you must wait until the previous flush has finished before initiating a new one.
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountFlushAsync(String account, Integer xEeTimeout, RequestFlush body, final ApiCallback<RequestFlushResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV1AccountAccountFlushValidateBeforeCall(account, xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<RequestFlushResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV1AccountAccountReconnect
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountReconnectCall(String account, Integer xEeTimeout, RequestReconnect body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/account/{account}/reconnect"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV1AccountAccountReconnectValidateBeforeCall(String account, Integer xEeTimeout, RequestReconnect body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling putV1AccountAccountReconnect(Async)");
        }

        return putV1AccountAccountReconnectCall(account, xEeTimeout, body, _callback);

    }

    /**
     * Request reconnect
     * Requests connection to be reconnected
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return RequestReconnectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public RequestReconnectResponse putV1AccountAccountReconnect(String account, Integer xEeTimeout, RequestReconnect body) throws ApiException {
        ApiResponse<RequestReconnectResponse> localVarResp = putV1AccountAccountReconnectWithHttpInfo(account, xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Request reconnect
     * Requests connection to be reconnected
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;RequestReconnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestReconnectResponse> putV1AccountAccountReconnectWithHttpInfo(String account, Integer xEeTimeout, RequestReconnect body) throws ApiException {
        okhttp3.Call localVarCall = putV1AccountAccountReconnectValidateBeforeCall(account, xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<RequestReconnectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request reconnect (asynchronously)
     * Requests connection to be reconnected
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountReconnectAsync(String account, Integer xEeTimeout, RequestReconnect body, final ApiCallback<RequestReconnectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV1AccountAccountReconnectValidateBeforeCall(account, xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<RequestReconnectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV1AccountAccountSync
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountSyncCall(String account, Integer xEeTimeout, RequestSync body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/account/{account}/sync"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { "*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV1AccountAccountSyncValidateBeforeCall(String account, Integer xEeTimeout, RequestSync body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling putV1AccountAccountSync(Async)");
        }

        return putV1AccountAccountSyncCall(account, xEeTimeout, body, _callback);

    }

    /**
     * Request syncing
     * Requests account syncing to be run immediatelly
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return RequestSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public RequestSyncResponse putV1AccountAccountSync(String account, Integer xEeTimeout, RequestSync body) throws ApiException {
        ApiResponse<RequestSyncResponse> localVarResp = putV1AccountAccountSyncWithHttpInfo(account, xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Request syncing
     * Requests account syncing to be run immediatelly
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;RequestSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestSyncResponse> putV1AccountAccountSyncWithHttpInfo(String account, Integer xEeTimeout, RequestSync body) throws ApiException {
        okhttp3.Call localVarCall = putV1AccountAccountSyncValidateBeforeCall(account, xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<RequestSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request syncing (asynchronously)
     * Requests account syncing to be run immediatelly
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1AccountAccountSyncAsync(String account, Integer xEeTimeout, RequestSync body, final ApiCallback<RequestSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV1AccountAccountSyncValidateBeforeCall(account, xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<RequestSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
