{
  "basePath": "/",
  "info": {
    "title": "EmailEngine",
    "version": "2.42.0",
    "contact": {
      "name": "Postal Systems OÃœ",
      "email": "info@emailengine.app"
    },
    "description": "You will need an Access Token to use this API (generate one <a href=\"/admin/tokens\" target=\"_parent\">here</a>).\n\nWhen making API calls remember that requests against the same account are queued and not executed in parallel. If a previous request takes too much time to finish, a queued request might time out before EmailEngine can run it."
  },
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "access_token",
      "in": "query"
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "swagger": "2.0",
  "host": "127.0.0.1:3000",
  "schemes": [
    "http"
  ],
  "tags": [],
  "paths": {
    "/v1/accounts": {
      "get": {
        "summary": "List accounts",
        "operationId": "getV1Accounts",
        "description": "Lists registered accounts",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter accounts by state",
            "enum": [
              "init",
              "syncing",
              "connecting",
              "connected",
              "authenticationError",
              "connectError",
              "unset",
              "disconnected"
            ],
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter accounts by string match",
            "name": "query",
            "in": "query"
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccountsFilterResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/autoconfig": {
      "get": {
        "summary": "Discover Email settings",
        "operationId": "getV1Autoconfig",
        "description": "Try to discover IMAP and SMTP settings for an email account",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Email address to discover email settings for",
            "x-format": {
              "email": true
            },
            "name": "email",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DiscoveredEmailSettings"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/blocklists": {
      "get": {
        "summary": "List blocklists",
        "operationId": "getV1Blocklists",
        "description": "List blocklists with blocked addresses",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "tags": [
          "Blocklists"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BlocklistsResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/changes": {
      "get": {
        "summary": "Stream state changes",
        "operationId": "getV1Changes",
        "description": "Stream account state changes as an EventSource",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/gateways": {
      "get": {
        "summary": "List gateways",
        "operationId": "getV1Gateways",
        "description": "Lists registered gateways",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "tags": [
          "SMTP Gateway"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GatewaysFilterResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/license": {
      "get": {
        "summary": "Request license info",
        "operationId": "getV1License",
        "description": "Get active license information",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          }
        ],
        "tags": [
          "License"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/LicenseResponse"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Register a license",
        "operationId": "postV1License",
        "description": "Set up a license for EmailEngine to unlock all features",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RegisterLicense"
            }
          }
        ],
        "tags": [
          "License"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/LicenseResponse"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Remove license",
        "operationId": "deleteV1License",
        "description": "Remove registered active license",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          }
        ],
        "tags": [
          "License"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EmptyLicenseResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/oauth2": {
      "get": {
        "summary": "List OAuth2 applications",
        "operationId": "getV1Oauth2",
        "description": "Lists registered OAuth2 applications",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "tags": [
          "OAuth2 Applications"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/OAuth2FilterResponse"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Register OAuth2 application",
        "operationId": "postV1Oauth2",
        "description": "Registers a new OAuth2 application for a specific provider",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateOAuth2App"
            }
          }
        ],
        "tags": [
          "OAuth2 Applications"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateAppResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/outbox": {
      "get": {
        "summary": "List queued messages",
        "operationId": "getV1Outbox",
        "description": "Lists messages in the Outbox",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "tags": [
          "Outbox"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/OutboxListResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/settings": {
      "get": {
        "summary": "List specific settings",
        "operationId": "getV1Settings",
        "description": "List setting values for specific keys",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "boolean",
            "default": false,
            "name": "eventTypes",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "webhooksEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "webhooks",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "webhookEvents",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "webhooksCustomHeaders",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "notifyHeaders",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "serviceUrl",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "trackSentMessages",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "resolveGmailCategories",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "ignoreMailCertErrors",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "generateEmailSummary",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "generateRiskAssessment",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiAPIKey",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiModel",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiAPIUrl",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStoreChatModel",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiTemperature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiTopP",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiPrompt",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiGenerateEmbeddings",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "inboxNewOnly",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "serviceSecret",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "authServer",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "proxyEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "proxyUrl",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpEhloName",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "notifyText",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "notifyWebSafeHtml",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "notifyTextSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "notifyCalendarEvents",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "gmailEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "gmailClientId",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "gmailClientSecret",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "gmailRedirectUrl",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "gmailExtraScopes",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "outlookEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "outlookClientId",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "outlookClientSecret",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "outlookRedirectUrl",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "outlookAuthority",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "outlookExtraScopes",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "mailRuEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "mailRuClientId",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "mailRuClientSecret",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "mailRuRedirectUrl",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "mailRuExtraScopes",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "serviceClient",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "serviceKey",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "serviceExtraScopes",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "logs",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "imapStrategy",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpStrategy",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "localAddresses",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpServerEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpServerPort",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpServerHost",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpServerProxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpServerAuthEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpServerPassword",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "smtpServerTLSEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "imapProxyServerEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "imapProxyServerPort",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "imapProxyServerHost",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "imapProxyServerProxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "imapProxyServerPassword",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "imapProxyServerTLSEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "queueKeep",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "deliveryAttempts",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "templateHeader",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "scriptEnv",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "enableApiProxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStoreEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStoreUrl",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStoreIndex",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStoreAuthEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStoreUsername",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStorePassword",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStoreGenerateEmbeddings",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStorePreProcessingEnabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "locale",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "timezone",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "openAiPreProcessingFn",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStorePreProcessingFn",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "documentStorePreProcessingMap",
            "in": "query"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SettingsQueryResponse"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Set setting values",
        "operationId": "postV1Settings",
        "description": "Set setting values for specific keys",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SettingsUpdatedResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/stats": {
      "get": {
        "summary": "Return server stats",
        "operationId": "getV1Stats",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Duration for counters",
            "default": 3600,
            "minimum": 0,
            "maximum": 604800,
            "name": "seconds",
            "in": "query"
          }
        ],
        "tags": [
          "Stats"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SettingsResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/templates": {
      "get": {
        "summary": "List account templates",
        "operationId": "getV1Templates",
        "description": "Lists stored templates for the account",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID to list the templates for",
            "maxLength": 256,
            "name": "account",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccountTemplatesResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/tokens": {
      "get": {
        "summary": "List root tokens",
        "operationId": "getV1Tokens",
        "description": "Lists access tokens registered for root access",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          }
        ],
        "tags": [
          "Access Tokens"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RootTokensResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/webhookRoutes": {
      "get": {
        "summary": "List webhook routes",
        "operationId": "getV1Webhookroutes",
        "description": "List custom webhook routes",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/WebhookRoutesListResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}": {
      "get": {
        "summary": "Get account info",
        "operationId": "getV1AccountAccount",
        "description": "Returns stored information about the account. Passwords are not included.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If true, then include quota information in the response",
            "default": false,
            "name": "quota",
            "in": "query"
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Remove synced account",
        "operationId": "deleteV1AccountAccount",
        "description": "Stop syncing IMAP account and delete cached values",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteRequestResponse"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update account info",
        "operationId": "putV1AccountAccount",
        "description": "Updates account information",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateAccount"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model14"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/blocklist/{listId}": {
      "get": {
        "summary": "List blocklist entries",
        "operationId": "getV1BlocklistListid",
        "description": "List blocked addresses for a list",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "List ID. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list.",
            "x-format": {
              "hostname": true
            },
            "name": "listId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "tags": [
          "Blocklists"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BlocklistListResponse"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Add to blocklist",
        "operationId": "postV1BlocklistListid",
        "description": "Add an email address to a blocklist",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "List ID. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list.",
            "x-format": {
              "hostname": true
            },
            "name": "listId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/BlocklistListAddPayload"
            }
          }
        ],
        "tags": [
          "Blocklists"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BlocklistListAddResponse"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Remove from blocklist",
        "operationId": "deleteV1BlocklistListid",
        "description": "Delete a blocked email address from a list",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "List ID. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list.",
            "x-format": {
              "hostname": true
            },
            "name": "listId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Email address to remove from the list",
            "x-format": {
              "email": true
            },
            "name": "recipient",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "Blocklists"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteBlocklistResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/gateway/{gateway}": {
      "get": {
        "summary": "Get gateway info",
        "operationId": "getV1GatewayGateway",
        "description": "Returns stored information about the gateway. Passwords are not included.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Gateway ID",
            "maxLength": 256,
            "name": "gateway",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "SMTP Gateway"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GatewayResponse"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Remove SMTP gateway",
        "operationId": "deleteV1GatewayGateway",
        "description": "Delete SMTP gateway data",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Gateway ID",
            "maxLength": 256,
            "name": "gateway",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "SMTP Gateway"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model10"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/logs/{account}": {
      "get": {
        "summary": "Return IMAP logs for an account",
        "operationId": "getV1LogsAccount",
        "description": "Output is a downloadable text file",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Logs"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/oauth2/{app}": {
      "get": {
        "summary": "Get application info",
        "operationId": "getV1Oauth2App",
        "description": "Returns stored information about an OAuth2 application. Secrets are not included.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "OAuth2 application ID",
            "maxLength": 256,
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "OAuth2 Applications"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Remove OAuth2 application",
        "operationId": "deleteV1Oauth2App",
        "description": "Delete OAuth2 application data",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "OAuth2 application ID",
            "maxLength": 256,
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "OAuth2 Applications"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteAppRequestResponse"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update OAuth2 application",
        "operationId": "putV1Oauth2App",
        "description": "Updates OAuth2 application information",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "OAuth2 application ID",
            "maxLength": 256,
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateGateway"
            }
          }
        ],
        "tags": [
          "OAuth2 Applications"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateGatewayResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/oauth-token": {
      "get": {
        "summary": "Get OAuth2 access token",
        "operationId": "getV1AccountAccountOauthtoken",
        "description": "Get the active OAuth2 access token for an account. NB! This endpoint is disabled by default and needs activation on the Service configuration page.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccountTokenResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/messages": {
      "get": {
        "summary": "List messages in a folder",
        "operationId": "getV1AccountAccountMessages",
        "description": "Lists messages in a mailbox folder",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mailbox folder path",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If enabled then fetch the data from the Document Store instead of IMAP",
            "default": false,
            "name": "documentStore",
            "in": "query"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update messages",
        "operationId": "putV1AccountAccountMessages",
        "description": "Update message information for matching emails",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mailbox folder path",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessagesUpdateRequest"
            }
          }
        ],
        "tags": [
          "Multi Message Actions"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageUpdateResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/mailboxes": {
      "get": {
        "summary": "List mailboxes",
        "operationId": "getV1AccountAccountMailboxes",
        "description": "Lists all available mailboxes",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If true, then includes message counters in the response",
            "default": false,
            "name": "counters",
            "in": "query"
          }
        ],
        "tags": [
          "Mailbox"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MailboxesFilterResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/delivery-test/check/{deliveryTest}": {
      "get": {
        "summary": "Check test status",
        "operationId": "getV1DeliverytestCheckDeliverytest",
        "description": "Check delivery test status",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Test ID",
            "x-format": {
              "guid": {
                "version": [
                  "uuidv4",
                  "uuidv5"
                ]
              }
            },
            "name": "deliveryTest",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Delivery Test"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeliveryCheckResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/settings/queue/{queue}": {
      "get": {
        "summary": "Show queue information",
        "operationId": "getV1SettingsQueueQueue",
        "description": "Show queue status and current state",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Queue ID",
            "enum": [
              "notify",
              "submit",
              "documents"
            ],
            "x-convert": {
              "trim": true
            },
            "name": "queue",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SettingsQueueResponse"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Set queue settings",
        "operationId": "putV1SettingsQueueQueue",
        "description": "Set queue settings",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Queue ID",
            "enum": [
              "notify",
              "submit",
              "documents"
            ],
            "x-convert": {
              "trim": true
            },
            "name": "queue",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SettingsPutQueuePayload"
            }
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SettingsPutQueueResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/templates/template/{template}": {
      "get": {
        "summary": "Get template information",
        "operationId": "getV1TemplatesTemplateTemplate",
        "description": "Retrieve template content and information",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Template ID",
            "maxLength": 256,
            "name": "template",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccountTemplateResponse"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Remove a template",
        "operationId": "deleteV1TemplatesTemplateTemplate",
        "description": "Delete a stored template",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Template ID",
            "maxLength": 256,
            "name": "template",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model11"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update a template",
        "operationId": "putV1TemplatesTemplateTemplate",
        "description": "Update a stored template.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Template ID",
            "maxLength": 256,
            "name": "template",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateTemplate"
            }
          }
        ],
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateTemplateResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/tokens/account/{account}": {
      "get": {
        "summary": "List account tokens",
        "operationId": "getV1TokensAccountAccount",
        "description": "Lists access tokens registered for an account",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Access Tokens"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccountsTokensResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/webhookRoutes/webhookRoute/{webhookRoute}": {
      "get": {
        "summary": "Get webhook route information",
        "operationId": "getV1WebhookroutesWebhookrouteWebhookroute",
        "description": "Retrieve webhook route content and information",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Webhook ID",
            "maxLength": 256,
            "name": "webhookRoute",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/WebhookRouteResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/message/{message}": {
      "get": {
        "summary": "Get message information",
        "operationId": "getV1AccountAccountMessageMessage",
        "description": "Returns details of a specific message. By default text content is not included, use textType value to force retrieving text",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Message ID",
            "maxLength": 256,
            "name": "message",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Max length of text content. This setting is ignored if `documentStore` is `true`.",
            "minimum": 0,
            "maximum": 1073741824,
            "name": "maxBytes",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Which text content to return, use * for all. By default text content is not returned.",
            "enum": [
              "html",
              "plain",
              "*"
            ],
            "x-convert": {
              "case": "lower"
            },
            "name": "textType",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Shorthand option to fetch and preprocess HTML and inlined images. Overrides `textType`, `preProcessHtml`, and `preProcessHtml` options.",
            "default": false,
            "name": "webSafeHtml",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, then fetches attached images and embeds these in the HTML as data URIs",
            "default": false,
            "name": "embedAttachedImages",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, then pre-processes HTML for compatibility",
            "default": false,
            "name": "preProcessHtml",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, then marks unseen email as seen while returning the message",
            "default": false,
            "name": "markAsSeen",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If enabled then fetch the data from the Document Store instead of IMAP",
            "default": false,
            "name": "documentStore",
            "in": "query"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageDetails"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete message",
        "operationId": "deleteV1AccountAccountMessageMessage",
        "description": "Move message to Trash or delete it if already in Trash",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Message ID",
            "maxLength": 256,
            "name": "message",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Delete message even if not in Trash",
            "default": false,
            "name": "force",
            "in": "query"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageDeleteResponse"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update message",
        "operationId": "putV1AccountAccountMessageMessage",
        "description": "Update message information. Mainly this means changing message flag values",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Message ID",
            "maxLength": 256,
            "name": "message",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessageUpdate"
            }
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageUpdateResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/attachment/{attachment}": {
      "get": {
        "summary": "Download attachment",
        "operationId": "getV1AccountAccountAttachmentAttachment",
        "description": "Fetches attachment file as a binary stream",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attachment ID",
            "maxLength": 256,
            "name": "attachment",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/text/{text}": {
      "get": {
        "summary": "Retrieve message text",
        "operationId": "getV1AccountAccountTextText",
        "description": "Retrieves message text",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Message text ID",
            "maxLength": 10240,
            "name": "text",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Max length of text content. This setting is ignored if `documentStore` is `true`.",
            "minimum": 0,
            "maximum": 1073741824,
            "name": "maxBytes",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Which text content to return, use * for all. By default all contents are returned.",
            "default": "*",
            "enum": [
              "html",
              "plain",
              "*"
            ],
            "x-convert": {
              "case": "lower"
            },
            "name": "textType",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If enabled then fetch the data from the Document Store instead of IMAP",
            "default": false,
            "name": "documentStore",
            "in": "query"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TextResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/message/{message}/source": {
      "get": {
        "summary": "Download raw message",
        "operationId": "getV1AccountAccountMessageMessageSource",
        "description": "Fetches raw message as a stream",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Message ID",
            "maxLength": 256,
            "name": "message",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account": {
      "post": {
        "summary": "Register new account",
        "operationId": "postV1Account",
        "description": "Registers new IMAP account to be synced",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateAccount"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateAccountResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/gateway": {
      "post": {
        "summary": "Register new gateway",
        "operationId": "postV1Gateway",
        "description": "Registers a new SMP gateway",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateGateway"
            }
          }
        ],
        "tags": [
          "SMTP Gateway"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateGatewayResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/token": {
      "post": {
        "summary": "Provision an access token",
        "operationId": "postV1Token",
        "description": "Provisions a new access token for an account",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateToken"
            }
          }
        ],
        "tags": [
          "Access Tokens"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateTokenResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/verifyAccount": {
      "post": {
        "summary": "Verify IMAP and SMTP settings",
        "operationId": "postV1Verifyaccount",
        "description": "Checks if can connect and authenticate using provided account info",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VerifyAccount"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VerifyAccountResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/authentication/form": {
      "post": {
        "summary": "Generate authentication link",
        "operationId": "postV1AuthenticationForm",
        "description": "Generates a redirect link to the hosted authentication form",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RequestAuthForm"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestAuthFormResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/chat/{account}": {
      "post": {
        "summary": "Chat with emails",
        "operationId": "postV1ChatAccount",
        "description": "Use OpenAI API and embeddings stored in the Document Store to \"chat\" with account emails. Requires Document Store indexing and the \"Chat with emails\" feature to be enabled.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RequestChat"
            }
          }
        ],
        "tags": [
          "X1. Deprecated endpoints (Document Store)"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReturnChatResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/templates/template": {
      "post": {
        "summary": "Create template",
        "operationId": "postV1TemplatesTemplate",
        "description": "Create a new stored template. Templates can be used when sending emails as the content of the message.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateTemplate"
            }
          }
        ],
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateTemplateResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/unified/search": {
      "post": {
        "summary": "Unified search for messages",
        "operationId": "postV1UnifiedSearch",
        "description": "Filter messages from the Document Store for multiple accounts or paths. Document Store must be enabled for the unified search to work.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If enabled then returns the ElasticSearch query for debugging as part of the response",
            "name": "exposeQuery",
            "in": "query",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UnifiedSearchQuery"
            }
          }
        ],
        "tags": [
          "X1. Deprecated endpoints (Document Store)"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/submit": {
      "post": {
        "summary": "Submit message for delivery",
        "operationId": "postV1AccountAccountSubmit",
        "description": "Submit message for delivery. If reference message ID is provided then EmailEngine adds all headers and flags required for a reply/forward automatically.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SubmitMessage"
            }
          }
        ],
        "tags": [
          "Submit"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SubmitMessageResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/search": {
      "post": {
        "summary": "Search for messages",
        "operationId": "postV1AccountAccountSearch",
        "description": "Filter messages from a mailbox folder by search options. Search is performed against a specific folder and not for the entire account.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mailbox folder path. Not required if `documentStore` is `true`",
            "name": "path",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number (zero indexed, so use 0 for first page)",
            "default": 0,
            "minimum": 0,
            "maximum": 1048576,
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "How many entries per page",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If enabled then fetch the data from the Document Store instead of IMAP",
            "default": false,
            "name": "documentStore",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If enabled then returns the ElasticSearch query for debugging as part of the response",
            "name": "exposeQuery",
            "in": "query"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model5"
            }
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/mailbox": {
      "post": {
        "summary": "Create mailbox",
        "operationId": "postV1AccountAccountMailbox",
        "description": "Create new mailbox folder",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateMailbox"
            }
          }
        ],
        "tags": [
          "Mailbox"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateMailboxResponse"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete mailbox",
        "operationId": "deleteV1AccountAccountMailbox",
        "description": "Delete existing mailbox folder",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mailbox folder path to delete",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "Mailbox"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteMailboxResponse"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Rename mailbox",
        "operationId": "putV1AccountAccountMailbox",
        "description": "Rename an existing mailbox folder",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RenameMailbox"
            }
          }
        ],
        "tags": [
          "Mailbox"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RenameMailboxResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/message": {
      "post": {
        "summary": "Upload message",
        "operationId": "postV1AccountAccountMessage",
        "description": "Upload a message structure, compile it into an EML file and store it into selected mailbox.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessageUpload"
            }
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageUploadResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/delivery-test/account/{account}": {
      "post": {
        "summary": "Create delivery test",
        "operationId": "postV1DeliverytestAccountAccount",
        "description": "Initiate a delivery test",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeliveryStartRequest"
            }
          }
        ],
        "tags": [
          "Delivery Test"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeliveryStartResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/outbox/{queueId}": {
      "delete": {
        "summary": "Remove a message",
        "operationId": "deleteV1OutboxQueueid",
        "description": "Remove a message from the outbox",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Queue identifier for scheduled email",
            "maxLength": 100,
            "name": "queueId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Outbox"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteOutboxEntryResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/token/{token}": {
      "delete": {
        "summary": "Remove a token",
        "operationId": "deleteV1TokenToken",
        "description": "Delete an access token",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Access token",
            "x-constraint": {
              "length": 64
            },
            "x-format": {
              "hex": {
                "byteAligned": false,
                "prefix": false
              }
            },
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Access Tokens"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteTokenRequestResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/templates/account/{account}": {
      "delete": {
        "summary": "Flush templates",
        "operationId": "deleteV1TemplatesAccountAccount",
        "description": "Delete all stored templates for an account",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Must be true in order to flush templates",
            "default": false,
            "enum": [
              true
            ],
            "name": "force",
            "in": "query"
          }
        ],
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteTemplateRequestResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/flush": {
      "put": {
        "summary": "Request account flush",
        "operationId": "putV1AccountAccountFlush",
        "description": "Deletes all email indexes from Redis and ElasticSearch and re-creates the index for that account. You can only run a single flush operation at a time, so you must wait until the previous flush has finished before initiating a new one.",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RequestFlush"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestFlushResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/reconnect": {
      "put": {
        "summary": "Request reconnect",
        "operationId": "putV1AccountAccountReconnect",
        "description": "Requests connection to be reconnected",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RequestReconnect"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestReconnectResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/sync": {
      "put": {
        "summary": "Request syncing",
        "operationId": "putV1AccountAccountSync",
        "description": "Requests account syncing to be run immediatelly",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RequestSync"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSyncResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/gateway/edit/{gateway}": {
      "put": {
        "summary": "Update gateway info",
        "operationId": "putV1GatewayEditGateway",
        "description": "Updates gateway information",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Gateway ID",
            "maxLength": 256,
            "name": "gateway",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model17"
            }
          }
        ],
        "tags": [
          "SMTP Gateway"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateGatewayResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/messages/delete": {
      "put": {
        "summary": "Delete messages",
        "operationId": "putV1AccountAccountMessagesDelete",
        "description": "Move messages to Trash or delete these if already in Trash",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mailbox folder path",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Delete messages even if not in Trash",
            "default": false,
            "name": "force",
            "in": "query"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessagesDeleteRequest"
            }
          }
        ],
        "tags": [
          "Multi Message Actions"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessagesDeleteResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/messages/move": {
      "put": {
        "summary": "Move messages",
        "operationId": "putV1AccountAccountMessagesMove",
        "description": "Move messages matching to a search query to another folder",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Source mailbox folder path",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessagesMoveRequest"
            }
          }
        ],
        "tags": [
          "Multi Message Actions"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessagesMoveResponse"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/v1/account/{account}/message/{message}/move": {
      "put": {
        "summary": "Move message",
        "operationId": "putV1AccountAccountMessageMessageMove",
        "description": "Move message to another folder",
        "parameters": [
          {
            "type": "integer",
            "description": "Override the `EENGINE_TIMEOUT` environment variable for a single API request (in milliseconds)",
            "minimum": 0,
            "maximum": 7200000,
            "name": "x-ee-timeout",
            "in": "header",
            "required": false
          },
          {
            "type": "string",
            "description": "Account ID",
            "maxLength": 256,
            "x-convert": {
              "trim": true
            },
            "name": "account",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Message ID",
            "maxLength": 256,
            "name": "message",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessageMove"
            }
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MessageMoveResponse"
            },
            "description": "Successful"
          }
        }
      }
    }
  },
  "definitions": {
    "type": {
      "type": "string",
      "description": "Account type",
      "example": "outlook",
      "enum": [
        "imap",
        "gmail",
        "gmailService",
        "outlook",
        "mailRu",
        "oauth2"
      ]
    },
    "state": {
      "type": "string",
      "description": "Account state",
      "example": "connected",
      "enum": [
        "init",
        "syncing",
        "connecting",
        "connected",
        "authenticationError",
        "connectError",
        "unset",
        "disconnected"
      ]
    },
    "AcountCountersEvents": {
      "type": "object",
      "description": "Lifetime event counters",
      "example": {
        "messageNew": 30,
        "messageDeleted": 5
      }
    },
    "AccountCounters": {
      "type": "object",
      "properties": {
        "events": {
          "$ref": "#/definitions/AcountCountersEvents"
        }
      }
    },
    "grant": {
      "type": "string",
      "description": "Requested grant type",
      "example": "refresh_token",
      "enum": [
        "refresh_token",
        "authorization_code"
      ]
    },
    "OauthScopes": {
      "type": "array",
      "description": "List of requested OAuth2 scopes",
      "items": {
        "type": "string",
        "description": "OAuth2 scope",
        "example": "https://mail.google.com/"
      }
    },
    "response": {
      "type": "object",
      "description": "Server response",
      "example": {
        "error": "invalid_grant",
        "error_description": "Bad Request"
      }
    },
    "tokenRequest": {
      "type": "object",
      "description": "OAuth2 error info if token request failed",
      "properties": {
        "grant": {
          "$ref": "#/definitions/grant"
        },
        "provider": {
          "type": "string",
          "description": "OAuth2 provider",
          "example": "gmail",
          "maxLength": 256
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code for the OAuth2 request",
          "example": 400
        },
        "clientId": {
          "type": "string",
          "description": "OAuth2 client ID used to authenticate this request",
          "example": "1023289917884-h3nu00e9cb7h252e24c23sv19l8k57ah.apps.googleusercontent.com"
        },
        "scopes": {
          "$ref": "#/definitions/OauthScopes"
        },
        "response": {
          "$ref": "#/definitions/response"
        }
      }
    },
    "AccountErrorEntry": {
      "type": "object",
      "properties": {
        "response": {
          "type": "string",
          "example": "Token request failed"
        },
        "serverResponseCode": {
          "type": "string",
          "example": "OauthRenewError"
        },
        "tokenRequest": {
          "$ref": "#/definitions/tokenRequest"
        }
      }
    },
    "AccountResponseItem": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "name": {
          "type": "string",
          "description": "Display name for the account",
          "example": "My Email Account",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "Default email address of the account",
          "example": "user@example.com",
          "x-format": {
            "email": true
          }
        },
        "type": {
          "$ref": "#/definitions/type"
        },
        "app": {
          "type": "string",
          "description": "OAuth2 application ID",
          "example": "AAABhaBPHscAAAAH",
          "maxLength": 256
        },
        "state": {
          "$ref": "#/definitions/state"
        },
        "webhooks": {
          "type": "string",
          "description": "Account-specific webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "proxy": {
          "type": "string",
          "description": "Proxy URL",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "smtpEhloName": {
          "type": "string",
          "description": "Hostname to use for the SMTP EHLO/HELO greeting",
          "example": "my.proxy.tld",
          "x-format": {
            "hostname": true
          }
        },
        "counters": {
          "$ref": "#/definitions/AccountCounters"
        },
        "syncTime": {
          "type": "string",

          "description": "Last sync time",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "lastError": {
          "$ref": "#/definitions/AccountErrorEntry"
        }
      },
      "required": [
        "account",
        "type",
        "state"
      ]
    },
    "AccountEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccountResponseItem"
      }
    },
    "AccountsFilterResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "accounts": {
          "$ref": "#/definitions/AccountEntries"
        }
      }
    },
    "DetectedAuthenticationInfo": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Account username",
          "example": "myuser@gmail.com",
          "maxLength": 256
        }
      }
    },
    "ResolvedServerSettings": {
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/DetectedAuthenticationInfo"
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "imap.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 993,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 993",
          "example": true,
          "default": false
        }
      },
      "required": [
        "host",
        "port"
      ]
    },
    "DiscoveredServerSettings": {
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/DetectedAuthenticationInfo"
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "imap.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 993,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 993",
          "example": true,
          "default": false
        }
      },
      "required": [
        "host",
        "port"
      ]
    },
    "DiscoveredEmailSettings": {
      "type": "object",
      "properties": {
        "imap": {
          "$ref": "#/definitions/ResolvedServerSettings"
        },
        "smtp": {
          "$ref": "#/definitions/DiscoveredServerSettings"
        },
        "_source": {
          "type": "string",
          "description": "Source for the detected info",
          "example": "srv"
        }
      }
    },
    "BlocklistsResponseItem": {
      "type": "object",
      "properties": {
        "listId": {
          "type": "string",
          "description": "List ID",
          "example": "example",
          "maxLength": 256
        },
        "count": {
          "type": "integer",
          "description": "Count of blocked addresses in this list",
          "example": 12
        }
      },
      "required": [
        "listId"
      ]
    },
    "BlocklistsEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BlocklistsResponseItem"
      }
    },
    "BlocklistsResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "blocklists": {
          "$ref": "#/definitions/BlocklistsEntries"
        }
      }
    },
    "GatewayResponseItem": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "Gateway ID",
          "example": "example",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Display name for the gateway",
          "example": "My Email Gateway",
          "maxLength": 256
        },
        "deliveries": {
          "type": "integer",
          "description": "Count of email deliveries using this gateway",
          "example": 100
        },
        "lastUse": {
          "type": "string",

          "description": "Last delivery time",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "lastError": {
          "$ref": "#/definitions/AccountErrorEntry"
        }
      },
      "required": [
        "gateway"
      ]
    },
    "GatewayEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GatewayResponseItem"
      }
    },
    "GatewaysFilterResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "gateways": {
          "$ref": "#/definitions/GatewayEntries"
        }
      }
    },
    "LicenseDetails": {
      "type": "object",
      "enum": [
        false
      ],
      "properties": {
        "application": {
          "type": "string",
          "example": "@postalsys/emailengine-app"
        },
        "key": {
          "type": "string",
          "description": "License key",
          "example": "1edf01e35e75ed3425808eba",
          "x-format": {
            "hex": {
              "byteAligned": false,
              "prefix": false
            }
          }
        },
        "licensedTo": {
          "type": "string",
          "description": "Licensed to",
          "example": "Kreata OÃœ",
          "x-format": {
            "hex": {
              "byteAligned": false,
              "prefix": false
            }
          }
        },
        "hostname": {
          "type": "string",
          "description": "Hostname or environment this license applies to",
          "example": "emailengine.example.com"
        },
        "created": {
          "type": "string",

          "description": "Time the license was provisioned",
          "example": "2021-10-13T07:47:42.695Z"
        }
      }
    },
    "LicenseResponse": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Is there an active license registered",
          "example": true
        },
        "type": {
          "type": "string",
          "description": "Active license type",
          "example": "EmailEngine License"
        },
        "details": {
          "$ref": "#/definitions/LicenseDetails"
        },
        "suspended": {
          "type": "boolean",
          "description": "Are email connections closed",
          "example": false
        }
      }
    },
    "OAuth2Provider": {
      "type": "string",
      "description": "OAuth2 provider",
      "example": "gmail",
      "enum": [
        "gmail",
        "gmailService",
        "outlook",
        "mailRu"
      ]
    },
    "OAuth2ResponseItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "OAuth2 application ID",
          "example": "AAABhaBPHscAAAAH",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Display name for the app",
          "example": "My OAuth2 App",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "OAuth2 application description",
          "example": "App description",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "title": {
          "type": "string",
          "description": "Title for the application button",
          "example": "App title",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "provider": {
          "$ref": "#/definitions/OAuth2Provider"
        },
        "enabled": {
          "type": "boolean",
          "description": "Is the application enabled",
          "example": true
        },
        "legacy": {
          "type": "boolean",
          "description": "`true` for older OAuth2 apps set via the settings endpoint",
          "example": true
        },
        "created": {
          "type": "string",

          "description": "The time this entry was added",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "updated": {
          "type": "string",

          "description": "The time this entry was updated",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "includeInListing": {
          "type": "boolean",
          "description": "Is the application listed in the hosted authentication form",
          "example": true
        },
        "clientId": {
          "type": "string",
          "description": "Client or Application ID for 3-legged OAuth2 applications",
          "example": "4f05f488-d858-4f2c-bd12-1039062612fe"
        },
        "clientSecret": {
          "type": "string",
          "description": "Client secret for 3-legged OAuth2 applications. Actual value is not revealed.",
          "example": "******"
        },
        "authority": {
          "type": "string",
          "description": "Authorization tenant value for Outlook OAuth2 applications",
          "example": "common"
        },
        "redirectUrl": {
          "type": "string",
          "description": "Redirect URL for 3-legged OAuth2 applications",
          "example": "https://myservice.com/oauth",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "serviceClient": {
          "type": "string",
          "description": "Service client ID for 2-legged OAuth2 applications",
          "example": "9103965568215821627203"
        },
        "serviceKey": {
          "type": "string",
          "description": "PEM formatted service secret for 2-legged OAuth2 applications. Actual value is not revealed.",
          "example": "******"
        },
        "lastError": {
          "$ref": "#/definitions/AccountErrorEntry"
        }
      },
      "required": [
        "id",
        "provider",
        "created"
      ]
    },
    "OAuth2Entries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OAuth2ResponseItem"
      }
    },
    "OAuth2FilterResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "apps": {
          "$ref": "#/definitions/OAuth2Entries"
        }
      }
    },
    "source": {
      "type": "string",
      "description": "How this message was added to the queue",
      "example": "smtp",
      "enum": [
        "smtp",
        "api"
      ]
    },
    "to": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "recipient@example.com",
        "x-format": {
          "email": true
        }
      }
    },
    "envelope": {
      "type": "object",
      "description": "SMTP envelope",
      "properties": {
        "from": {
          "type": "string",
          "example": "sender@example.com",
          "x-format": {
            "email": true
          }
        },
        "to": {
          "$ref": "#/definitions/to"
        }
      }
    },
    "status": {
      "type": "string",
      "description": "Current state of the sending",
      "example": "queued",
      "enum": [
        "queued",
        "processing",
        "submitted",
        "error"
      ]
    },
    "OutboxListProgressError": {
      "type": "object",
      "description": "Error information if state=error",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error message",
          "example": "Authentication failed"
        },
        "code": {
          "type": "string",
          "description": "Error code",
          "example": "EAUTH"
        },
        "statusCode": {
          "type": "string",
          "description": "SMTP response code",
          "example": 502
        }
      }
    },
    "OutboxListProgress": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/status"
        },
        "response": {
          "type": "string",
          "description": "Response from the SMTP server. Only if state=processing",
          "example": "250 Message Accepted"
        },
        "error": {
          "$ref": "#/definitions/OutboxListProgressError"
        }
      }
    },
    "OutboxListItem": {
      "type": "object",
      "properties": {
        "queueId": {
          "type": "string",
          "description": "Outbox queue ID",
          "example": "1869c5692565f756b33"
        },
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "source": {
          "$ref": "#/definitions/source"
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>",
          "maxLength": 996
        },
        "envelope": {
          "$ref": "#/definitions/envelope"
        },
        "subject": {
          "type": "string",
          "description": "Message subject",
          "example": "What a wonderful message",
          "maxLength": 10240
        },
        "created": {
          "type": "string",

          "description": "The time this message was queued",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "scheduled": {
          "type": "string",

          "description": "When this message is supposed to be delivered",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "nextAttempt": {
          "type": "string",

          "description": "Next delivery attempt",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "attemptsMade": {
          "type": "integer",
          "description": "How many times EmailEngine has tried to deliver this email",
          "example": 3
        },
        "attempts": {
          "type": "integer",
          "description": "How many delivery attempts to make until message is considered as failed",
          "example": 3
        },
        "progress": {
          "$ref": "#/definitions/OutboxListProgress"
        }
      },
      "required": [
        "account"
      ]
    },
    "OutboxListEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OutboxListItem"
      }
    },
    "OutboxListResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "messages": {
          "$ref": "#/definitions/OutboxListEntries"
        }
      }
    },
    "webhookEvents": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "messageNew",
        "maxLength": 256
      }
    },
    "WebhooksCustomHeader": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "Authorization",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "value": {
          "type": "string",
          "example": "Bearer <secret-token>",
          "default": "",
          "maxLength": 10240,
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "key"
      ]
    },
    "WebhooksCustomHeaders": {
      "type": "array",
      "description": "Custom HTTP headers added to webhook requests",
      "items": {
        "$ref": "#/definitions/WebhooksCustomHeader"
      }
    },
    "notifyHeaders": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "List-ID",
        "maxLength": 256
      }
    },
    "gmailExtraScopes": {
      "type": "array",
      "description": "Gmail OAuth2 Extra Scopes (deprecated)",
      "items": {
        "type": "string",
        "example": "https://mail.google.com/",
        "maxLength": 256,
        "x-convert": {
          "trim": true
        }
      }
    },
    "outlookAuthority": {
      "type": "string",
      "description": "Outlook OAuth2 authority (deprecated)",
      "example": "consumers",
      "enum": [
        "consumers",
        "organizations",
        "common"
      ]
    },
    "outlookExtraScopes": {
      "type": "array",
      "description": "Outlook OAuth2 Extra Scopes (deprecated)",
      "items": {
        "type": "string",
        "example": "offline_access",
        "maxLength": 256,
        "x-convert": {
          "trim": true
        }
      }
    },
    "mailRuExtraScopes": {
      "type": "array",
      "description": "Mail.ru OAuth2 Extra Scopes (deprecated)",
      "items": {
        "type": "string",
        "example": "offline_access",
        "maxLength": 256,
        "x-convert": {
          "trim": true
        }
      }
    },
    "serviceExtraScopes": {
      "type": "array",
      "description": "OAuth2 Service Extra Scopes (deprecated)",
      "items": {
        "type": "string",
        "example": "https://mail.google.com/",
        "maxLength": 256,
        "x-convert": {
          "trim": true
        }
      }
    },
    "LogSettings": {
      "type": "object",
      "properties": {
        "all": {
          "type": "boolean",
          "description": "Enable logs for all accounts",
          "example": false,
          "default": false
        },
        "maxLogLines": {
          "type": "integer",
          "default": 10000,
          "minimum": 0,
          "maximum": 1000000
        }
      }
    },
    "imapStrategy": {
      "type": "string",
      "description": "How to select local IP address for IMAP connections",
      "enum": [
        "default",
        "dedicated",
        "random"
      ]
    },
    "smtpStrategy": {
      "type": "string",
      "description": "How to select local IP address for SMTP connections",
      "enum": [
        "default",
        "dedicated",
        "random"
      ]
    },
    "localAddresses": {
      "type": "array",
      "description": "A list of pooled local IP addresses that can be used for IMAP and SMTP connections",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "x-format": {
          "ip": {
            "cidr": "forbidden",
            "version": [
              "ipv4",
              "ipv6"
            ]
          }
        }
      }
    },
    "locale": {
      "type": "string",
      "description": "Default locale identifier",
      "example": "fr",
      "enum": [
        "en",
        "et",
        "fr",
        "de",
        "ja"
      ],
      "maxLength": 100
    },
    "SettingsQueryResponse": {
      "type": "object",
      "properties": {
        "webhooksEnabled": {
          "type": "boolean",
          "description": "If false then do not emit webhooks"
        },
        "webhooks": {
          "type": "string",
          "description": "Webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "webhookEvents": {
          "$ref": "#/definitions/webhookEvents"
        },
        "webhooksCustomHeaders": {
          "$ref": "#/definitions/WebhooksCustomHeaders"
        },
        "notifyHeaders": {
          "$ref": "#/definitions/notifyHeaders"
        },
        "serviceUrl": {
          "type": "string",
          "description": "Base URL of EmailEngine",
          "example": "https://emailengine.example.com",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "trackSentMessages": {
          "type": "boolean",
          "description": "If true, then rewrite html links in sent emails to track opens and clicks"
        },
        "resolveGmailCategories": {
          "type": "boolean",
          "description": "If true, then resolve the category tab for incoming emails"
        },
        "ignoreMailCertErrors": {
          "type": "boolean",
          "description": "If true, then allow insecure certificates for IMAP/SMTP"
        },
        "generateEmailSummary": {
          "type": "boolean",
          "description": "If true, then extracts reply text using OpenAI ChatGPT"
        },
        "generateRiskAssessment": {
          "type": "boolean",
          "description": "(deprecated, not used)"
        },
        "openAiAPIKey": {
          "type": "string",
          "description": "OpenAI API key",
          "example": "verysecr8t"
        },
        "openAiModel": {
          "type": "string",
          "description": "OpenAI API Model",
          "example": "gpt-3.5-turbo"
        },
        "openAiAPIUrl": {
          "type": "string",
          "description": "OpenAI API URL",
          "example": "https://api.openai.com",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "documentStoreChatModel": {
          "type": "string",
          "description": "OpenAI API Model for chat",
          "example": "gpt-3.5-turbo"
        },
        "openAiTemperature": {
          "type": "number",
          "description": "OpenAI Temperature",
          "example": 0.8,
          "minimum": 0,
          "maximum": 2
        },
        "openAiTopP": {
          "type": "number",
          "description": "Top-p sampling",
          "example": 0.1,
          "minimum": 0,
          "maximum": 1
        },
        "openAiPrompt": {
          "type": "string",
          "description": "Prompt to send to LLM for analyzing emails",
          "example": "You are an assistant scanning incoming emails...",
          "maxLength": 6144
        },
        "openAiGenerateEmbeddings": {
          "type": "boolean",
          "description": "If true, then generates vector embeddings for the email"
        },
        "inboxNewOnly": {
          "type": "boolean",
          "description": "If true, then send \"New Email\" webhooks for incoming emails only"
        },
        "serviceSecret": {
          "type": "string",
          "description": "HMAC secret for signing public requests",
          "example": "verysecr8t"
        },
        "authServer": {
          "type": "string",
          "description": "URL to fetch authentication data from",
          "example": "https://myservice.com/authentication",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "proxyEnabled": {
          "type": "boolean",
          "description": "Is the global proxy enabled or not"
        },
        "proxyUrl": {
          "type": "string",
          "description": "Proxy URL",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "smtpEhloName": {
          "type": "string",
          "description": "Hostname to use for the SMTP EHLO/HELO greeting",
          "example": "my.proxy.tld",
          "x-format": {
            "hostname": true
          }
        },
        "notifyText": {
          "type": "boolean",
          "description": "Include message text in webhook notification"
        },
        "notifyWebSafeHtml": {
          "type": "boolean",
          "description": "Pre-process HTML in webhook notification to be web safe"
        },
        "notifyTextSize": {
          "type": "integer",
          "minimum": 0
        },
        "notifyCalendarEvents": {
          "type": "boolean",
          "description": "Include calendar events in webhook notification"
        },
        "gmailEnabled": {
          "type": "boolean",
          "description": "If true then do not show Gmail account option (deprecated)"
        },
        "gmailClientId": {
          "type": "string",
          "description": "Gmail OAuth2 Client ID (deprecated)",
          "maxLength": 256
        },
        "gmailClientSecret": {
          "type": "string",
          "description": "Gmail OAuth2 Client Secret (deprecated)",
          "maxLength": 256
        },
        "gmailRedirectUrl": {
          "type": "string",
          "description": "Gmail OAuth2 Callback URL (deprecated)",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "gmailExtraScopes": {
          "$ref": "#/definitions/gmailExtraScopes"
        },
        "outlookEnabled": {
          "type": "boolean",
          "description": "If true then do not show Outlook account option (deprecated)"
        },
        "outlookClientId": {
          "type": "string",
          "description": "Outlook OAuth2 Client ID (deprecated)",
          "maxLength": 256
        },
        "outlookClientSecret": {
          "type": "string",
          "description": "Outlook OAuth2 Client Secret (deprecated)",
          "maxLength": 256
        },
        "outlookRedirectUrl": {
          "type": "string",
          "description": "Outlook OAuth2 Callback URL (deprecated)",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "outlookAuthority": {
          "$ref": "#/definitions/outlookAuthority"
        },
        "outlookExtraScopes": {
          "$ref": "#/definitions/outlookExtraScopes"
        },
        "mailRuEnabled": {
          "type": "boolean",
          "description": "If true then do not show Mail.ru account option (deprecated)"
        },
        "mailRuClientId": {
          "type": "string",
          "description": "Mail.ru OAuth2 Client ID (deprecated)",
          "maxLength": 256
        },
        "mailRuClientSecret": {
          "type": "string",
          "description": "Mail.ru OAuth2 Client Secret (deprecated)",
          "maxLength": 256
        },
        "mailRuRedirectUrl": {
          "type": "string",
          "description": "Mail.ru OAuth2 Callback URL (deprecated)",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "mailRuExtraScopes": {
          "$ref": "#/definitions/mailRuExtraScopes"
        },
        "serviceClient": {
          "type": "string",
          "description": "OAuth2 Service Client ID (deprecated)",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "serviceKey": {
          "type": "string",
          "description": "OAuth2 Secret Service Key (deprecated)",
          "maxLength": 102400,
          "x-convert": {
            "trim": true
          }
        },
        "serviceExtraScopes": {
          "$ref": "#/definitions/serviceExtraScopes"
        },
        "logs": {
          "$ref": "#/definitions/LogSettings"
        },
        "imapStrategy": {
          "$ref": "#/definitions/imapStrategy"
        },
        "smtpStrategy": {
          "$ref": "#/definitions/smtpStrategy"
        },
        "localAddresses": {
          "$ref": "#/definitions/localAddresses"
        },
        "smtpServerEnabled": {
          "type": "boolean",
          "description": "Enable SMTP Interface"
        },
        "smtpServerPort": {
          "type": "integer",
          "description": "SMTP Interface Port",
          "minimum": 0,
          "maximum": 65536
        },
        "smtpServerHost": {
          "type": "string",
          "description": "SMTP Host to bind to",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          }
        },
        "smtpServerProxy": {
          "type": "boolean",
          "description": "Enable PROXY Protocol for SMTP server"
        },
        "smtpServerAuthEnabled": {
          "type": "boolean",
          "description": "Enable SMTP authentication"
        },
        "smtpServerPassword": {
          "type": "string",
          "description": "SMTP client password. Set to null to disable.",
          "maxLength": 1024
        },
        "smtpServerTLSEnabled": {
          "type": "boolean",
          "description": "Enable TLS for the SMTP interface. Requires a valid certificate."
        },
        "imapProxyServerEnabled": {
          "type": "boolean",
          "description": "Enable IMAP Proxy Interface"
        },
        "imapProxyServerPort": {
          "type": "integer",
          "description": "IMAP Proxy Interface Port",
          "minimum": 0,
          "maximum": 65536
        },
        "imapProxyServerHost": {
          "type": "string",
          "description": "IMAP Proxy Host to bind to",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          }
        },
        "imapProxyServerProxy": {
          "type": "boolean",
          "description": "Enable PROXY Protocol for the IMAP proxy server"
        },
        "imapProxyServerPassword": {
          "type": "string",
          "description": "IMAP proxy client password. Set to null to disable.",
          "maxLength": 1024
        },
        "imapProxyServerTLSEnabled": {
          "type": "boolean",
          "description": "Enable TLS for the IMAP proxy interface. Requires a valid certificate."
        },
        "queueKeep": {
          "type": "integer",
          "description": "How many completed or failed queue entries to keep",
          "minimum": 0
        },
        "deliveryAttempts": {
          "type": "integer",
          "description": "How many times to retry an email sending before it is considered as failing",
          "minimum": 0
        },
        "templateHeader": {
          "type": "string",
          "description": "HTML code displayed on the top of public pages like the hosted authentication form",
          "maxLength": 1048576,
          "x-convert": {
            "trim": true
          }
        },
        "scriptEnv": {
          "type": "string",
          "description": "JSON object to be used as the `env` variable in pre-processing scripts",
          "example": "{\"key\": \"value\"}",
          "maxLength": 1048576,
          "x-convert": {
            "trim": true
          }
        },
        "enableApiProxy": {
          "type": "boolean",
          "description": "Enable support for reverse proxies"
        },
        "documentStoreEnabled": {
          "type": "boolean",
          "description": "Enable Document Store syncing"
        },
        "documentStoreUrl": {
          "type": "string",
          "description": "Document Store URL",
          "example": "https://localhost:9200",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "documentStoreIndex": {
          "type": "string",
          "description": "Document Store index name",
          "maxLength": 1024
        },
        "documentStoreAuthEnabled": {
          "type": "boolean",
          "description": "Enable Document Store authentication"
        },
        "documentStoreUsername": {
          "type": "string",
          "description": "Document Store username",
          "maxLength": 1024
        },
        "documentStorePassword": {
          "type": "string",
          "description": "Document Store password",
          "maxLength": 1024
        },
        "documentStoreGenerateEmbeddings": {
          "type": "boolean",
          "description": "If true, then generates vector embeddings for the email and stores these in the Document Store"
        },
        "documentStorePreProcessingEnabled": {
          "type": "boolean",
          "description": "Enable Document Store pre-processing"
        },
        "locale": {
          "$ref": "#/definitions/locale"
        },
        "timezone": {
          "type": "string",
          "description": "Default timezone identifier",
          "example": "Europe/Tallinn",
          "maxLength": 100
        },
        "openAiPreProcessingFn": {
          "type": "string",
          "description": "Filter function for LLM pre-processing (JavaScript)",
          "example": "return true; // passes all emails",
          "maxLength": 524288
        },
        "documentStorePreProcessingFn": {
          "type": "string",
          "description": "Filter function for Document Store pre-processing (JavaScript)",
          "example": "return true; // passes all emails",
          "maxLength": 524288
        },
        "documentStorePreProcessingMap": {
          "type": "string",
          "description": "Mapping function for Document Store pre-processing (JavaScript)",
          "example": "return payload; // returns unmodified data",
          "maxLength": 524288
        }
      }
    },
    "ConnectionsStats": {
      "type": "object",
      "description": "Counts of accounts in different connection states",
      "properties": {
        "init": {
          "type": "integer",
          "description": "Accounts not yet initialized",
          "example": 2
        },
        "connected": {
          "type": "integer",
          "description": "Successfully connected accounts",
          "example": 8
        },
        "connecting": {
          "type": "integer",
          "description": "Connection is being established",
          "example": 7
        },
        "authenticationError": {
          "type": "integer",
          "description": "Authentication failed",
          "example": 3
        },
        "connectError": {
          "type": "integer",
          "description": "Connection failed due to technical error",
          "example": 5
        },
        "unset": {
          "type": "integer",
          "description": "Accounts without valid IMAP settings",
          "example": 0
        },
        "disconnected": {
          "type": "integer",
          "description": "IMAP connection was closed",
          "example": 1
        }
      }
    },
    "CounterStats": {
      "type": "object"
    },
    "SettingsResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "EmailEngine version number",
          "example": "2.42.0"
        },
        "license": {
          "type": "string",
          "description": "EmailEngine license",
          "example": "LICENSE_EMAILENGINE"
        },
        "accounts": {
          "type": "integer",
          "description": "Number of registered accounts",
          "example": 26
        },
        "node": {
          "type": "string",
          "description": "Node.js Version",
          "example": "16.10.0"
        },
        "redis": {
          "type": "string",
          "description": "Redis Version",
          "example": "6.2.4"
        },
        "connections": {
          "$ref": "#/definitions/ConnectionsStats"
        },
        "counters": {
          "$ref": "#/definitions/CounterStats"
        }
      }
    },
    "format": {
      "type": "string",
      "description": "Markup language for HTML (\"html\", \"markdown\" or \"mjml\")",
      "default": "html",
      "enum": [
        "html",
        "mjml",
        "markdown"
      ]
    },
    "AccountTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Template ID",
          "example": "AAABgS-UcAYAAAABAA",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Name of the template",
          "example": "Transaction receipt",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Optional description of the template",
          "example": "Something about the template",
          "maxLength": 1024
        },
        "format": {
          "$ref": "#/definitions/format"
        },
        "created": {
          "type": "string",

          "description": "The time this template was created",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "updated": {
          "type": "string",

          "description": "The time this template was last updated",
          "example": "2021-02-17T13:43:18.860Z"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "AccountTemplatesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccountTemplate"
      }
    },
    "AccountTemplatesResponse": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "templates": {
          "$ref": "#/definitions/AccountTemplatesList"
        }
      },
      "required": [
        "account"
      ]
    },
    "RootTokensItem": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "description": {
          "type": "string",
          "description": "Token description",
          "example": "Token description",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "metadata": {
          "type": "string",
          "description": "Related metadata in JSON format",
          "example": "{\"example\": \"value\"}",
          "maxLength": 1048576
        },
        "ip": {
          "type": "string",
          "description": "IP address of the requestor",
          "example": "127.0.0.1",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          },
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "account",
        "description"
      ]
    },
    "RootTokensEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RootTokensItem"
      }
    },
    "RootTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "$ref": "#/definitions/RootTokensEntries"
        }
      }
    },
    "WebhookRoutesListEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Webhook ID",
          "example": "AAABgS-UcAYAAAABAA",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Name of the route",
          "example": "Send to Slack",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Optional description of the webhook route",
          "example": "Something about the route",
          "maxLength": 1024
        },
        "created": {
          "type": "string",

          "description": "The time this route was created",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "updated": {
          "type": "string",

          "description": "The time this route was last updated",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "enabled": {
          "type": "boolean",
          "description": "Is the route enabled",
          "example": true
        },
        "targetUrl": {
          "type": "string",
          "description": "Webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "tcount": {
          "type": "integer",
          "description": "How many times this route has been applied",
          "example": 123
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "WebhookRoutesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WebhookRoutesListEntry"
      }
    },
    "WebhookRoutesListResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "webhooks": {
          "$ref": "#/definitions/WebhookRoutesList"
        }
      }
    },
    "AccountPath": {
      "type": "array",
      "description": "Check changes only on selected paths. Either a single string path or an array of paths. Can use references like `\"\\Sent\"` or `\"\\Inbox\"`. Set to `null` to unset.",
      "example": [
        "*"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "description": "Check changes only on selected paths. Either a single string path or an array of paths. Can use references like `\"\\Sent\"` or `\"\\Inbox\"`. Set to `null` to unset.",
        "example": "INBOX",
        "maxLength": 1024
      }
    },
    "SubconnectionPaths": {
      "type": "array",
      "description": "An array of mailbox paths. If set, then EmailEngine opens additional IMAP connections against these paths to detect changes faster. NB! connection counts are usually highly limited.",
      "example": [
        "[Gmail]/Spam",
        "\\Sent"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 256
      }
    },
    "accessToken": {
      "type": "string",
      "description": "Access token for OAuth2",
      "example": false,
      "enum": [
        false
      ],
      "maxLength": 16384
    },
    "Authentication": {
      "type": "object",
      "description": "Authentication info",
      "enum": [
        false
      ],
      "properties": {
        "user": {
          "type": "string",
          "description": "Account username",
          "example": "myuser@gmail.com",
          "maxLength": 256
        },
        "accessToken": {
          "$ref": "#/definitions/accessToken"
        },
        "pass": {
          "type": "string",
          "description": "Account password",
          "example": "verysecret",
          "maxLength": 256
        }
      },
      "required": [
        "user"
      ]
    },
    "TLS": {
      "type": "object",
      "description": "Optional TLS configuration",
      "properties": {
        "rejectUnauthorized": {
          "type": "boolean",
          "description": "How to treat invalid certificates",
          "example": true,
          "default": true
        },
        "minVersion": {
          "type": "string",
          "description": "Minimal TLS version",
          "example": "TLSv1.2",
          "maxLength": 256
        }
      }
    },
    "IMAPResponse": {
      "type": "object",
      "description": "IMAP configuration",
      "properties": {
        "auth": {
          "$ref": "#/definitions/Authentication"
        },
        "useAuthServer": {
          "type": "boolean",
          "description": "Set to true to use authentication server instead of username/password",
          "example": false
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "imap.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 993,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 993",
          "example": true,
          "default": false
        },
        "tls": {
          "$ref": "#/definitions/TLS"
        },
        "resyncDelay": {
          "type": "integer",
          "description": "Full resync delay in seconds",
          "example": 900,
          "default": 900
        },
        "disabled": {
          "type": "boolean",
          "description": "Set to true to disable IMAP handling",
          "example": false
        },
        "sentMailPath": {
          "type": "string",
          "description": "Upload sent message to this folder. By default the account's Sent Mail folder is used. Set to `null` to unset.",
          "example": "Sent Mail",
          "maxLength": 1024
        },
        "draftsMailPath": {
          "type": "string",
          "description": "Folder for drafts. By default the account's Draft Mail folder is used. Set to `null` to unset.",
          "example": "Drafts",
          "maxLength": 1024
        },
        "junkMailPath": {
          "type": "string",
          "description": "Folder for spam. By default the account's Junk Mail folder is used. Set to `null` to unset.",
          "example": "Junk",
          "maxLength": 1024
        },
        "trashMailPath": {
          "type": "string",
          "description": "Folder for deleted emails. By default the account's Trash folder is used. Set to `null` to unset.",
          "example": "Trash",
          "maxLength": 1024
        },
        "archiveMailPath": {
          "type": "string",
          "description": "Folder for archived emails. By default the account's Archive folder is used. Set to `null` to unset.",
          "example": "Archive",
          "maxLength": 1024
        }
      }
    },
    "SMTPResponse": {
      "type": "object",
      "description": "SMTP configuration",
      "properties": {
        "auth": {
          "$ref": "#/definitions/Authentication"
        },
        "useAuthServer": {
          "type": "boolean",
          "description": "Set to true to use authentication server instead of username/password",
          "example": false
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "smtp.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 587,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 465",
          "example": false,
          "default": false
        },
        "tls": {
          "$ref": "#/definitions/TLS"
        }
      },
      "required": [
        "host",
        "port"
      ]
    },
    "OAuth2Auth": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Account username",
          "example": "user@oulook.com",
          "maxLength": 256
        },
        "delegatedUser": {
          "type": "string",
          "description": "Shared mailbox username (MS365 only)",
          "example": "shared.mailbox@oulook.com",
          "maxLength": 256
        }
      },
      "required": [
        "user"
      ]
    },
    "Oauth2Response": {
      "type": "object",
      "description": "OAuth2 configuration",
      "properties": {
        "authorize": {
          "type": "boolean",
          "description": "Return a redirect link to the OAuth2 consent screen",
          "example": false
        },
        "redirectUrl": {
          "type": "string",
          "description": "The user will be redirected to this URL after returning from the OAuth2 consent screen (only valid if `authorize=true`",
          "example": "https://myapp/account/settings.php",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "provider": {
          "type": "string",
          "description": "OAuth provider",
          "example": "gmail",
          "maxLength": 256
        },
        "auth": {
          "$ref": "#/definitions/OAuth2Auth"
        },
        "accessToken": {
          "type": "string",
          "example": "ya29.a0ARrdaM8a...",
          "maxLength": 16384
        },
        "tokenType": {
                    "type": "string",
                    "example": "Bearer",
                    "maxLength": 16384
                },
        "generated": {
          "type": "string",
          "description": "Generated time",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "refreshToken": {
          "type": "string",
          "example": "1//09Ie3CtORQYm...",
          "maxLength": 16384
        },
        "scope": {
                    "$ref": "#/definitions/Model15"
                },
        "authority": {
          "type": "string",
          "description": "Outloook account type. Either 'consumers', 'organizations', 'common' or an organizartion ID",
          "example": "consumers",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "expires": {
          "type": "string",

          "description": "Token expiration date",
          "example": "2021-03-22T13:13:31.000Z"
        }
      }
    },
    "AccountInfoState": {
      "type": "string",
      "description": "Informational account state",
      "example": "connected",
      "enum": [
        "init",
        "syncing",
        "connecting",
        "connected",
        "authenticationError",
        "connectError",
        "unset",
        "disconnected"
      ]
    },
    "SMTPStatusStatus": {
      "type": "string",
      "description": "Was the last SMTP attempt successful or not",
      "enum": [
        "ok",
        "error"
      ]
    },
    "SMTPInfoStatus": {
      "type": "object",
      "description": "Information about the last SMTP connection attempt",
      "properties": {
        "created": {
          "type": "string",

          "description": "When was the status for SMTP connection last updated",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "status": {
          "$ref": "#/definitions/SMTPStatusStatus"
        },
        "response": {
          "type": "string",
          "description": "SMTP response message for delivery attempt",
          "example": "250 OK"
        },
        "description": {
          "type": "string",
          "description": "Error information",
          "example": "Authentication failed"
        },
        "responseCode": {
          "type": "integer",
          "description": "Error status code",
          "example": 500
        },
        "code": {
          "type": "string",
          "description": "Error type identifier",
          "example": "EAUTH"
        },
        "command": {
          "type": "string",
          "description": "SMTP command that failed",
          "example": "AUTH PLAIN"
        }
      }
    },
    "AccountWebhooksCustomHeaders": {
      "type": "array",
      "description": "Custom HTTP headers added to webhook requests",
      "items": {
        "$ref": "#/definitions/WebhooksCustomHeader"
      }
    },
    "AccountQuota": {
      "type": "object",
      "description": "Account quota information if query argument quota=true. This value will be false if the server does not provide quota information.",
      "enum": [
        false
      ],
      "properties": {
        "usage": {
          "type": "integer",
          "description": "How many bytes has the account stored in emails",
          "example": 8547884032
        },
        "limit": {
          "type": "integer",
          "description": "How many bytes can the account store emails",
          "example": 16106127360
        },
        "status": {
          "type": "string",
          "description": "Textual information about the usage",
          "example": "53%"
        }
      }
    },
    "AccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "name": {
          "type": "string",
          "description": "Display name for the account",
          "example": "My Email Account",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "Default email address of the account",
          "example": "user@example.com",
          "x-format": {
            "email": true
          }
        },
        "copy": {
          "type": "boolean",
          "description": "Copy submitted messages to Sent folder",
          "example": true
        },
        "logs": {
          "type": "boolean",
          "description": "Store recent logs",
          "example": false
        },
        "notifyFrom": {
          "type": "string",

          "description": "Send webhooks for messages starting from provided date. The default is the account creation date.",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "syncFrom": {
          "type": "string",

          "description": "Sync messages to document store starting from provided date. If not set, all emails are synced.",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "connections": {
                    "type": "integer",
                    "description": "No of connections",
                    "example": 1
                },
        "path": {
            "type": "string",
                    "description": "Check changes only on selected paths. Either a single string path or an array of paths. Can use references like `\"\\Sent\"` or `\"\\Inbox\"`. Set to `null` to unset.",
                    "example":"*"
                },
        "subconnections": {
          "$ref": "#/definitions/SubconnectionPaths"
        },
        "webhooks": {
          "type": "string",
          "description": "Account-specific webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "proxy": {
          "type": "string",
          "description": "Proxy URL",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "smtpEhloName": {
          "type": "string",
          "description": "Hostname to use for the SMTP EHLO/HELO greeting",
          "example": "my.proxy.tld",
          "x-format": {
            "hostname": true
          }
        },
        "imap": {
          "$ref": "#/definitions/IMAPResponse"
        },
        "smtp": {
          "$ref": "#/definitions/SMTPResponse"
        },
        "oauth2": {
          "$ref": "#/definitions/Oauth2Response"
        },
        "state": {
          "$ref": "#/definitions/AccountInfoState"
        },
        "smtpStatus": {
          "$ref": "#/definitions/SMTPInfoStatus"
        },
        "webhooksCustomHeaders": {
          "$ref": "#/definitions/AccountWebhooksCustomHeaders"
        },
        "locale": {
          "type": "string",
          "description": "Optional locale",
          "example": "fr",
          "maxLength": 100
        },
        "tz": {
          "type": "string",
          "description": "Optional timezone",
          "example": "Europe/Tallinn",
          "maxLength": 100
        },
        "type": {
          "$ref": "#/definitions/type"
        },
        "app": {
          "type": "string",
          "description": "OAuth2 application ID",
          "example": "AAABhaBPHscAAAAH",
          "maxLength": 256
        },
        "counters": {
          "$ref": "#/definitions/AccountCounters"
        },
        "quota": {
          "$ref": "#/definitions/AccountQuota"
        },
        "syncTime": {
          "type": "string",

          "description": "Last sync time",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "lastError": {
          "$ref": "#/definitions/AccountErrorEntry"
        }
      },
      "required": [
        "account",
        "type"
      ]
    },
    "BlocklistListResponseItem": {
      "type": "object",
      "properties": {
        "recipient": {
          "type": "string",
          "description": "Listed email address",
          "example": "user@example.com",
          "x-format": {
            "email": true
          }
        },
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>"
        },
        "source": {
          "type": "string",
          "description": "Which mechanism was used to add the entry",
          "example": "api"
        },
        "reason": {
          "type": "string",
          "description": "Why this entry was added",
          "example": "api"
        },
        "remoteAddress": {
          "type": "string",
          "description": "Which IP address triggered the entry",
          "x-format": {
            "ip": {
              "cidr": "optional",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          }
        },
        "userAgent": {
          "type": "string",
          "description": "Which user agent triggered the entry",
          "example": "Mozilla/5.0 (Macintosh)"
        },
        "created": {
          "type": "string",

          "description": "The time this entry was added or updated",
          "example": "2021-02-17T13:43:18.860Z"
        }
      },
      "required": [
        "recipient",
        "account",
        "created"
      ]
    },
    "BlocklistListEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BlocklistListResponseItem"
      }
    },
    "BlocklistListResponse": {
      "type": "object",
      "properties": {
        "listId": {
          "type": "string",
          "description": "List ID",
          "example": "example",
          "maxLength": 256
        },
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "addresses": {
          "$ref": "#/definitions/BlocklistListEntries"
        }
      },
      "required": [
        "listId"
      ]
    },
    "GatewayResponse": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "Gateway ID",
          "example": "example",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Display name for the gateway",
          "example": "My Email Gateway",
          "maxLength": 256
        },
        "deliveries": {
          "type": "integer",
          "description": "Count of email deliveries using this gateway",
          "example": 100
        },
        "lastUse": {
          "type": "string",

          "description": "Last delivery time",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "user": {
          "type": "string",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "pass": {
          "type": "string",
          "maxLength": 1024
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "smtp.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 465,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 465",
          "example": true,
          "default": false
        },
        "lastError": {
          "$ref": "#/definitions/AccountErrorEntry"
        }
      },
      "required": [
        "gateway",
        "name"
      ]
    },
    "ApplicationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "OAuth2 application ID",
          "example": "AAABhaBPHscAAAAH",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Display name for the app",
          "example": "My OAuth2 App",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "OAuth2 application description",
          "example": "App description",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "title": {
          "type": "string",
          "description": "Title for the application button",
          "example": "App title",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "provider": {
          "$ref": "#/definitions/OAuth2Provider"
        },
        "enabled": {
          "type": "boolean",
          "description": "Is the application enabled",
          "example": true
        },
        "legacy": {
          "type": "boolean",
          "description": "`true` for older OAuth2 apps set via the settings endpoint",
          "example": true
        },
        "created": {
          "type": "string",

          "description": "The time this entry was added",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "updated": {
          "type": "string",

          "description": "The time this entry was updated",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "includeInListing": {
          "type": "boolean",
          "description": "Is the application listed in the hosted authentication form",
          "example": true
        },
        "clientId": {
          "type": "string",
          "description": "Client or Application ID for 3-legged OAuth2 applications",
          "example": "4f05f488-d858-4f2c-bd12-1039062612fe"
        },
        "clientSecret": {
          "type": "string",
          "description": "Client secret for 3-legged OAuth2 applications. Actual value is not revealed.",
          "example": "******"
        },
        "authority": {
          "type": "string",
          "description": "Authorization tenant value for Outlook OAuth2 applications",
          "example": "common"
        },
        "redirectUrl": {
          "type": "string",
          "description": "Redirect URL for 3-legged OAuth2 applications",
          "example": "https://myservice.com/oauth",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "serviceClient": {
          "type": "string",
          "description": "Service client ID for 2-legged OAuth2 applications",
          "example": "9103965568215821627203"
        },
        "serviceKey": {
          "type": "string",
          "description": "PEM formatted service secret for 2-legged OAuth2 applications. Actual value is not revealed.",
          "example": "******"
        },
        "accounts": {
          "type": "integer",
          "description": "The number of accounts registered with this application. Not available for legacy apps.",
          "example": 12
        },
        "lastError": {
          "$ref": "#/definitions/AccountErrorEntry"
        }
      },
      "required": [
        "id",
        "provider",
        "created"
      ]
    },
    "AccountTokenResponse": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "user": {
          "type": "string",
          "description": "Username",
          "example": "user@example.com",
          "maxLength": 256
        },
        "accessToken": {
          "type": "string",
          "description": "Access Token",
          "example": "aGVsbG8gd29ybGQ=",
          "maxLength": 256
        },
        "provider": {
          "$ref": "#/definitions/OAuth2Provider"
        }
      },
      "required": [
        "account",
        "user",
        "accessToken",
        "provider"
      ]
    },
    "FromAddress": {
      "type": "object",
      "example": {
        "name": "From Me",
        "address": "sender@example.com"
      },
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "RcptAddressEntry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "AddressList": {
      "type": "array",
      "description": "List of addresses",
      "items": {
        "$ref": "#/definitions/RcptAddressEntry"
      }
    },
    "FlagList": {
      "type": "array",
      "description": "IMAP flags",
      "items": {
        "type": "string",
        "example": "\\Seen"
      }
    },
    "LabelList": {
      "type": "array",
      "description": "Gmail labels",
      "items": {
        "type": "string",
        "example": "\\Important"
      }
    },
    "AttachmentEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Attachment ID",
          "example": "AAAAAgAACrIyLjI"
        },
        "contentType": {
          "type": "string",
          "description": "Mime type of the attachment",
          "example": "image/gif"
        },
        "encodedSize": {
          "type": "integer",
          "description": "Encoded size of the attachment. Actual file size is usually smaller depending on the encoding",
          "example": 48
        },
        "embedded": {
          "type": "boolean",
          "description": "Is this image used in HTML img tag",
          "example": true
        },
        "inline": {
          "type": "boolean",
          "description": "Should this file be included in the message preview somehow",
          "example": true
        },
        "contentId": {
          "type": "string",
          "description": "Usually used only for embedded images",
          "example": "<unique-image-id@localhost>"
        },
        "filename": {
          "type": "string",
          "description": "The file name of the attachment",
          "example": "image.png"
        },
        "method": {
          "type": "string",
          "description": "Calendar event method if this is an ical event attachment",
          "example": "REQUEST"
        }
      }
    },
    "AttachmentList": {
      "type": "array",
      "description": "List of attachments",
      "items": {
        "$ref": "#/definitions/AttachmentEntry"
      }
    },
    "encodedSize": {
      "type": "object",
      "description": "Encoded message part sizes",
      "properties": {
        "plain": {
          "type": "integer",
          "description": "How many bytes for plain text",
          "example": 1013
        },
        "html": {
          "type": "integer",
          "description": "How many bytes for html content",
          "example": 1013
        }
      }
    },
    "TextInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Pointer to message text content",
          "example": "AAAAAgAACqiTkaExkaEykA"
        },
        "encodedSize": {
          "$ref": "#/definitions/encodedSize"
        }
      }
    },
    "MessageListEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Message ID",
          "example": "AAAAAgAACrI"
        },
        "uid": {
          "type": "integer",
          "description": "UID of the message",
          "example": 12345
        },
        "emailId": {
          "type": "string",
          "description": "Globally unique ID (if server supports it)",
          "example": "1694937972638499881"
        },
        "threadId": {
          "type": "string",
          "description": "Thread ID (if server supports it)",
          "example": "1694936993596975454"
        },
        "date": {
          "type": "string",

          "description": "Date (internal)",
          "example": "2021-03-22T13:13:31.000Z"
        },
        "draft": {
          "type": "boolean",
          "description": "Is this message marked as a draft",
          "example": false
        },
        "unseen": {
          "type": "boolean",
          "description": "Is this message unseen",
          "example": true
        },
        "flagged": {
          "type": "boolean",
          "description": "Is this message marked as flagged",
          "example": true
        },
        "size": {
          "type": "integer",
          "description": "Message size in bytes",
          "example": 1040
        },
        "subject": {
          "type": "string",
          "description": "Message subject (decoded into unicode, applies to other string values as well)",
          "example": "What a wonderful message"
        },
        "from": {
          "$ref": "#/definitions/FromAddress"
        },
        "replyTo": {
          "$ref": "#/definitions/AddressList"
        },
        "to": {
          "$ref": "#/definitions/AddressList"
        },
        "cc": {
          "$ref": "#/definitions/AddressList"
        },
        "bcc": {
          "$ref": "#/definitions/AddressList"
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>"
        },
        "inReplyTo": {
          "type": "string",
          "description": "Replied Message ID",
          "example": "<7JBUMt0WOn+_==MOkaCOQ@mail.gmail.com>"
        },
        "flags": {
          "$ref": "#/definitions/FlagList"
        },
        "labels": {
          "$ref": "#/definitions/LabelList"
        },
        "attachments": {
          "$ref": "#/definitions/AttachmentList"
        },
        "text": {
          "$ref": "#/definitions/TextInfo"
        },
        "preview": {
          "type": "string",
          "description": "Text preview for messages loaded from Document Store"
        }
      }
    },
    "PageMessages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MessageListEntry"
      }
    },
    "MessageList": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "description": "How many matching entries",
          "example": 120
        },
        "page": {
          "type": "integer",
          "description": "Current page (0-based index)",
          "example": 0
        },
        "pages": {
          "type": "integer",
          "description": "Total page count",
          "example": 24
        },
        "messages": {
          "$ref": "#/definitions/PageMessages"
        }
      }
    },
    "MailboxSpecialUse": {
      "type": "string",
      "description": "Special use flag of the mailbox",
      "example": "\\Sent",
      "enum": [
        "\\All",
        "\\Archive",
        "\\Drafts",
        "\\Flagged",
        "\\Junk",
        "\\Sent",
        "\\Trash",
        "\\Inbox"
      ]
    },
    "MailboxSpecialUseSource": {
      "type": "string",
      "description": "Where did EmailEngine get the specialUse flag. The source could be `\"user\"` if it was set through an account creation or update API call, `\"extension\"` if it was provided by the email server, or `\"name\"` if EmailEngine determined it based on the folder's name.",
      "example": "extension",
      "enum": [
        "user",
        "extension",
        "name"
      ]
    },
    "MailboxResponseStatus": {
      "type": "object",
      "description": "Optional counters info",
      "properties": {
        "messages": {
          "type": "integer",
          "description": "Count of messages in mailbox as reported by the STATUS command",
          "example": 120
        },
        "unseen": {
          "type": "integer",
          "description": "Count of unseen messages in mailbox as reported by the STATUS command",
          "example": 120
        }
      }
    },
    "MailboxResponseItem": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Full path to mailbox",
          "example": "Kalender/S&APw-nnip&AOQ-evad"
        },
        "delimiter": {
          "type": "string",
          "example": "/"
        },
        "parentPath": {
          "type": "string",
          "description": "Full path to parent mailbox",
          "example": "Kalender"
        },
        "name": {
          "type": "string",
          "description": "Maibox name",
          "example": "SÃ¼nnipÃ¤evad"
        },
        "listed": {
          "type": "boolean",
          "description": "Was the mailbox found from the output of LIST command",
          "example": true
        },
        "subscribed": {
          "type": "boolean",
          "description": "Was the mailbox found from the output of LSUB command",
          "example": true
        },
        "specialUse": {
          "$ref": "#/definitions/MailboxSpecialUse"
        },
        "specialUseSource": {
          "$ref": "#/definitions/MailboxSpecialUseSource"
        },
        "noInferiors": {
          "type": "boolean",
          "description": "If true, then adding subfolders is forbidden",
          "example": false
        },
        "messages": {
          "type": "integer",
          "description": "Count of messages in mailbox",
          "example": 120
        },
        "uidNext": {
          "type": "integer",
          "description": "Next expected UID",
          "example": 121
        },
        "status": {
          "$ref": "#/definitions/MailboxResponseStatus"
        }
      },
      "required": [
        "path",
        "parentPath",
        "name"
      ]
    },
    "MailboxesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MailboxResponseItem"
      }
    },
    "MailboxesFilterResponse": {
      "type": "object",
      "properties": {
        "mailboxes": {
          "$ref": "#/definitions/MailboxesList"
        }
      }
    },
    "dkim": {
      "type": "object",
      "description": "DKIM results"
    },
    "spf": {
      "type": "object",
      "description": "SPF results"
    },
    "dmarc": {
      "type": "object",
      "description": "DMARC results"
    },
    "bimi": {
      "type": "object",
      "description": "BIMI results"
    },
    "arc": {
      "type": "object",
      "description": "ARC results"
    },
    "mainSig": {
      "type": "object",
      "description": "Primary DKIM signature. `status.aligned` should be set, otherwise DKIM check should not be considered as passed."
    },
    "DeliveryCheckResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Was the test completed",
          "example": true
        },
        "dkim": {
          "$ref": "#/definitions/dkim"
        },
        "spf": {
          "$ref": "#/definitions/spf"
        },
        "dmarc": {
          "$ref": "#/definitions/dmarc"
        },
        "bimi": {
          "$ref": "#/definitions/bimi"
        },
        "arc": {
          "$ref": "#/definitions/arc"
        },
        "mainSig": {
          "$ref": "#/definitions/mainSig"
        }
      }
    },
    "queue": {
      "type": "string",
      "description": "Queue ID",
      "example": "notify",
      "enum": [
        "notify",
        "submit",
        "documents"
      ],
      "x-convert": {
        "trim": true
      }
    },
    "QueueJobs": {
      "type": "object",
      "properties": {
        "active": {
          "type": "integer",
          "description": "Jobs that are currently being processed",
          "example": 123
        },
        "delayed": {
          "type": "integer",
          "description": "Jobs that are processed in the future",
          "example": 123
        },
        "paused": {
          "type": "integer",
          "description": "Jobs that would be processed once queue processing is resumed",
          "example": 123
        },
        "waiting": {
          "type": "integer",
          "description": "Jobs that should be processed, but are waiting until there are any free handlers",
          "example": 123
        }
      }
    },
    "SettingsQueueResponse": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/queue"
        },
        "jobs": {
          "$ref": "#/definitions/QueueJobs"
        },
        "paused": {
          "type": "boolean",
          "description": "Is the queue paused or not",
          "example": false
        }
      },
      "required": [
        "queue"
      ]
    },
    "RequestTemplateContent": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "Message subject",
          "example": "What a wonderful message",
          "maxLength": 10240,
          "x-convert": {
            "trim": true
          }
        },
        "text": {
          "type": "string",
          "description": "Message Text",
          "example": "Hello from myself!",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "html": {
          "type": "string",
          "description": "Message HTML",
          "example": "<p>Hello from myself!</p>",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "previewText": {
          "type": "string",
          "description": "Preview text appears in the inbox after the subject line",
          "example": "Welcome to our newsletter!",
          "maxLength": 1024
        },
        "format": {
          "$ref": "#/definitions/format"
        }
      }
    },
    "AccountTemplateResponse": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "id": {
          "type": "string",
          "description": "Template ID",
          "example": "AAABgS-UcAYAAAABAA",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Name of the template",
          "example": "Transaction receipt",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Optional description of the template",
          "example": "Something about the template",
          "maxLength": 1024
        },
        "format": {
          "$ref": "#/definitions/format"
        },
        "created": {
          "type": "string",

          "description": "The time this template was created",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "updated": {
          "type": "string",

          "description": "The time this template was last updated",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "content": {
          "$ref": "#/definitions/RequestTemplateContent"
        }
      },
      "required": [
        "account",
        "id",
        "name"
      ]
    },
    "ReferrerAllowlist": {
      "type": "array",
      "description": "HTTP referrer allowlist for API requests",
      "example": [
        "*web.domain.org/*",
        "*.domain.org/*",
        "https://domain.org/*"
      ],
      "default": false,
      "enum": [
        false
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "AddressAllowlist": {
      "type": "array",
      "description": "IP address allowlist",
      "example": [
        "1.2.3.4",
        "5.6.7.8",
        "127.0.0.0/8"
      ],
      "default": false,
      "enum": [
        false
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "x-format": {
          "ip": {
            "cidr": "optional",
            "version": [
              "ipv4",
              "ipv6"
            ]
          }
        }
      }
    },
    "AddressRateLimit": {
      "type": "object",
      "description": "Rate limits for the token",
      "example": {
        "maxRequests": 20,
        "timeWindow": 2
      },
      "default": false,
      "enum": [
        false
      ],
      "properties": {
        "maxRequests": {
          "type": "integer",
          "description": "Allowed count of requests in the rate limit time window",
          "example": 20,
          "minimum": 1
        },
        "timeWindow": {
          "type": "integer",
          "description": "Rate limit time window in seconds",
          "example": 2,
          "minimum": 1
        }
      }
    },
    "TokenRestrictions": {
      "type": "object",
      "description": "Access restrictions",
      "enum": [
        false
      ],
      "properties": {
        "referrers": {
          "$ref": "#/definitions/ReferrerAllowlist"
        },
        "addresses": {
          "$ref": "#/definitions/AddressAllowlist"
        },
        "rateLimit": {
          "$ref": "#/definitions/AddressRateLimit"
        }
      }
    },
    "AccountTokensItem": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "description": {
          "type": "string",
          "description": "Token description",
          "example": "Token description",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "metadata": {
          "type": "string",
          "description": "Related metadata in JSON format",
          "example": "{\"example\": \"value\"}",
          "maxLength": 1048576
        },
        "restrictions": {
          "$ref": "#/definitions/TokenRestrictions"
        },
        "ip": {
          "type": "string",
          "description": "IP address of the requestor",
          "example": "127.0.0.1",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          },
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "account",
        "description"
      ]
    },
    "AccountTokensEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccountTokensItem"
      }
    },
    "AccountsTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "$ref": "#/definitions/AccountTokensEntries"
        }
      }
    },
    "WebhookRouteContent": {
      "type": "object",
      "properties": {
        "fn": {
          "type": "string",
          "description": "Filter function",
          "example": "return true;"
        },
        "map": {
          "type": "string",
          "description": "Mapping function",
          "example": "payload.ts = Date.now(); return payload;"
        }
      }
    },
    "WebhookRouteResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Webhook ID",
          "example": "AAABgS-UcAYAAAABAA",
          "maxLength": 256
        },
        "name": {
          "type": "string",
          "description": "Name of the route",
          "example": "Send to Slack",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Optional description of the webhook route",
          "example": "Something about the route",
          "maxLength": 1024
        },
        "created": {
          "type": "string",

          "description": "The time this route was created",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "updated": {
          "type": "string",

          "description": "The time this route was last updated",
          "example": "2021-02-17T13:43:18.860Z"
        },
        "enabled": {
          "type": "boolean",
          "description": "Is the route enabled",
          "example": true
        },
        "targetUrl": {
          "type": "string",
          "description": "Webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "tcount": {
          "type": "integer",
          "description": "How many times this route has been applied",
          "example": 123
        },
        "content": {
          "$ref": "#/definitions/WebhookRouteContent"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "MessageHeaders": {
      "type": "object",
      "description": "Object where header key is object key and value is an array",
      "example": {
        "from": [
          "From Me <sender@example.com>"
        ],
        "subject": [
          "What a wonderful message"
        ]
      }
    },
    "TextInfoDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Pointer to message text content. The value is `null` for messages retrieved from Document Store.",
          "example": "AAAAAgAACqiTkaExkaEykA"
        },
        "encodedSize": {
          "$ref": "#/definitions/encodedSize"
        },
        "plain": {
          "type": "string",
          "description": "Plaintext content of the message",
          "example": "Hello from myself!"
        },
        "html": {
          "type": "string",
          "description": "HTML content of the message",
          "example": "<p>Hello from myself!</p>"
        },
        "hasMore": {
          "type": "boolean",
          "description": "If partial message content was requested then this value indicates if it includes all the content or there is more",
          "example": false
        }
      }
    },
    "BounceResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "550 5.1.1 No such user"
        },
        "status": {
          "type": "string",
          "example": "5.1.1"
        }
      }
    },
    "BounceEntry": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Bounce email ID",
          "example": "AAAAAQAACnA",
          "maxLength": 256
        },
        "recipient": {
          "type": "string",
          "example": "recipient@example.com",
          "x-format": {
            "email": true
          }
        },
        "action": {
          "type": "string",
          "example": "failed"
        },
        "response": {
          "$ref": "#/definitions/BounceResponse"
        },
        "date": {
          "type": "string",

          "description": "Time the bounce was registered by EmailEngine",
          "example": "2021-03-22T13:13:31.000Z"
        }
      },
      "required": [
        "message"
      ]
    },
    "BounceList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BounceEntry"
      }
    },
    "MessageSpecialUse": {
      "type": "string",
      "description": "Special use flag of the message",
      "example": "\\Sent",
      "enum": [
        "\\Drafts",
        "\\Junk",
        "\\Sent",
        "\\Trash",
        "\\Inbox"
      ]
    },
    "MessageDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Message ID",
          "example": "AAAAAgAACrI"
        },
        "uid": {
          "type": "integer",
          "description": "UID of the message",
          "example": 12345
        },
        "emailId": {
          "type": "string",
          "description": "Globally unique ID (if server supports it)",
          "example": "1694937972638499881"
        },
        "threadId": {
          "type": "string",
          "description": "Thread ID (if server supports it). Always set for messages retrieved from Document Store.",
          "example": "1694936993596975454"
        },
        "date": {
          "type": "string",

          "description": "Date (internal)",
          "example": "2021-03-22T13:13:31.000Z"
        },
        "draft": {
          "type": "boolean",
          "description": "Is this message marked as a draft",
          "example": false
        },
        "unseen": {
          "type": "boolean",
          "description": "Is this message unseen",
          "example": true
        },
        "flagged": {
          "type": "boolean",
          "description": "Is this message marked as flagged",
          "example": true
        },
        "size": {
          "type": "integer",
          "description": "Message size in bytes",
          "example": 1040
        },
        "subject": {
          "type": "string",
          "description": "Message subject (decoded into unicode, applies to other string values as well)",
          "example": "What a wonderful message"
        },
        "path": {
          "type": "string",
          "description": "Path refers to the location of the message",
          "example": "Inbox"
        },
        "from": {
          "$ref": "#/definitions/FromAddress"
        },
        "sender": {
          "$ref": "#/definitions/FromAddress"
        },
        "to": {
          "$ref": "#/definitions/AddressList"
        },
        "cc": {
          "$ref": "#/definitions/AddressList"
        },
        "bcc": {
          "$ref": "#/definitions/AddressList"
        },
        "replyTo": {
          "$ref": "#/definitions/AddressList"
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>"
        },
        "inReplyTo": {
          "type": "string",
          "description": "Replied Message ID",
          "example": "<7JBUMt0WOn+_==MOkaCOQ@mail.gmail.com>"
        },
        "flags": {
          "$ref": "#/definitions/FlagList"
        },
        "labels": {
          "$ref": "#/definitions/LabelList"
        },
        "attachments": {
          "$ref": "#/definitions/AttachmentList"
        },
        "headers": {
          "$ref": "#/definitions/MessageHeaders"
        },
        "text": {
          "$ref": "#/definitions/TextInfoDetails"
        },
        "bounces": {
          "$ref": "#/definitions/BounceList"
        },
        "isAutoReply": {
          "type": "boolean",
          "description": "True if this message was detected to be an autoreply email like the Out of Office notice",
          "example": false
        },
        "specialUse": {
          "$ref": "#/definitions/MailboxSpecialUse"
        },
        "messageSpecialUse": {
          "$ref": "#/definitions/MessageSpecialUse"
        }
      }
    },
    "TextResponse": {
      "type": "object",
      "properties": {
        "plain": {
          "type": "string",
          "description": "Plaintext content",
          "example": "Hello world"
        },
        "html": {
          "type": "string",
          "description": "HTML content",
          "example": "<p>Hello world</p>"
        },
        "hasMore": {
          "type": "boolean",
          "description": "Is the current text output capped or not",
          "example": false
        }
      }
    },
    "ImapConfiguration": {
      "type": "object",
      "description": "IMAP configuration",
      "enum": [
        false
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/Authentication"
        },
        "useAuthServer": {
          "type": "boolean",
          "description": "Set to true to use authentication server instead of username/password",
          "example": false
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "imap.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 993,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 993",
          "example": true,
          "default": false
        },
        "tls": {
          "$ref": "#/definitions/TLS"
        },
        "resyncDelay": {
          "type": "integer",
          "description": "Full resync delay in seconds",
          "example": 900,
          "default": 900
        },
        "disabled": {
          "type": "boolean",
          "description": "Set to true to disable IMAP handling",
          "example": false
        },
        "sentMailPath": {
          "type": "string",
          "description": "Upload sent message to this folder. By default the account's Sent Mail folder is used. Set to `null` to unset.",
          "example": "Sent Mail",
          "maxLength": 1024
        },
        "draftsMailPath": {
          "type": "string",
          "description": "Folder for drafts. By default the account's Draft Mail folder is used. Set to `null` to unset.",
          "example": "Drafts",
          "maxLength": 1024
        },
        "junkMailPath": {
          "type": "string",
          "description": "Folder for spam. By default the account's Junk Mail folder is used. Set to `null` to unset.",
          "example": "Junk",
          "maxLength": 1024
        },
        "trashMailPath": {
          "type": "string",
          "description": "Folder for deleted emails. By default the account's Trash folder is used. Set to `null` to unset.",
          "example": "Trash",
          "maxLength": 1024
        },
        "archiveMailPath": {
          "type": "string",
          "description": "Folder for archived emails. By default the account's Archive folder is used. Set to `null` to unset.",
          "example": "Archive",
          "maxLength": 1024
        }
      }
    },
    "SmtpConfiguration": {
      "type": "object",
      "description": "SMTP configuration",
      "enum": [
        false
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/Authentication"
        },
        "useAuthServer": {
          "type": "boolean",
          "description": "Set to true to use authentication server instead of username/password",
          "example": false
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "smtp.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 587,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 465",
          "example": false,
          "default": false
        },
        "tls": {
          "$ref": "#/definitions/TLS"
        }
      },
      "required": [
        "host",
        "port"
      ]
    },
    "OAuth2": {
      "type": "object",
      "description": "OAuth2 configuration",
      "enum": [
        false
      ],
      "properties": {
        "authorize": {
          "type": "boolean",
          "description": "Return a redirect link to the OAuth2 consent screen",
          "example": false
        },
        "redirectUrl": {
          "type": "string",
          "description": "The user will be redirected to this URL after returning from the OAuth2 consent screen (only valid if `authorize=true`",
          "example": "https://myapp/account/settings.php",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "provider": {
          "type": "string",
          "description": "OAuth provider",
          "example": "gmail",
          "maxLength": 256
        },
        "auth": {
          "$ref": "#/definitions/OAuth2Auth"
        },
        "accessToken": {
          "type": "string",
          "example": "ya29.a0ARrdaM8a...",
          "maxLength": 16384
        },
        "refreshToken": {
          "type": "string",
          "example": "1//09Ie3CtORQYm...",
          "maxLength": 16384
        },
        "authority": {
          "type": "string",
          "description": "Outloook account type. Either 'consumers', 'organizations', 'common' or an organizartion ID",
          "example": "consumers",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "expires": {
          "type": "string",

          "description": "Token expiration date",
          "example": "2021-03-22T13:13:31.000Z"
        }
      }
    },
    "CreateAccount": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID. If the provided value is `null` then an unique ID will be autogenerated",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "name": {
          "type": "string",
          "description": "Display name for the account",
          "example": "My Email Account",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "Default email address of the account",
          "example": "user@example.com",
          "x-format": {
            "email": true
          }
        },
        "path": {
          "$ref": "#/definitions/AccountPath"
        },
        "subconnections": {
          "$ref": "#/definitions/SubconnectionPaths"
        },
        "webhooks": {
          "type": "string",
          "description": "Account-specific webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "copy": {
          "type": "boolean",
          "description": "Copy submitted messages to Sent folder. Set to `null` to unset and use provider specific default.",
          "example": null
        },
        "logs": {
          "type": "boolean",
          "description": "Store recent logs",
          "example": false,
          "default": false
        },
        "notifyFrom": {
          "type": "string",

          "description": "Send webhooks for messages starting from provided date. The default is the account creation date.",
          "example": "2021-07-08T07:06:34.336Z",
          "default": "now"
        },
        "syncFrom": {
          "type": "string",

          "description": "Sync messages to document store starting from provided date. If not set, all emails are synced.",
          "example": "2021-07-08T07:06:34.336Z",
          "default": null
        },
        "proxy": {
          "type": "string",
          "description": "Proxy URL",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "smtpEhloName": {
          "type": "string",
          "description": "Hostname to use for the SMTP EHLO/HELO greeting",
          "example": "my.proxy.tld",
          "x-format": {
            "hostname": true
          }
        },
        "imap": {
          "$ref": "#/definitions/ImapConfiguration"
        },
        "smtp": {
          "$ref": "#/definitions/SmtpConfiguration"
        },
        "oauth2": {
          "$ref": "#/definitions/OAuth2"
        },
        "webhooksCustomHeaders": {
          "$ref": "#/definitions/AccountWebhooksCustomHeaders"
        },
        "locale": {
          "type": "string",
          "description": "Optional locale",
          "example": "fr",
          "maxLength": 100
        },
        "tz": {
          "type": "string",
          "description": "Optional timezone",
          "example": "Europe/Tallinn",
          "maxLength": 100
        }
      },
      "required": [
        "account",
        "name"
      ]
    },
    "CreateAccountState": {
      "type": "string",
      "description": "Is the account new or updated existing",
      "example": "new",
      "enum": [
        "existing",
        "new"
      ]
    },
    "CreateAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "state": {
          "$ref": "#/definitions/CreateAccountState"
        }
      },
      "required": [
        "account",
        "state"
      ]
    },
    "CreateGateway": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "Gateway ID",
          "example": "sendgun",
          "default": null,
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "name": {
          "type": "string",
          "description": "Account Name",
          "example": "John Smith",
          "maxLength": 256
        },
        "user": {
          "type": "string",
          "default": null,
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "pass": {
          "type": "string",
          "default": null,
          "maxLength": 1024
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "smtp.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 465,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 465",
          "example": true,
          "default": false
        }
      },
      "required": [
        "gateway",
        "name",
        "host",
        "port"
      ]
    },
    "CreateGatewayState": {
      "type": "string",
      "description": "Is the gateway new or updated existing",
      "example": "new",
      "enum": [
        "existing",
        "new"
      ]
    },
    "CreateGatewayResponse": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "Gateway ID",
          "example": "example",
          "maxLength": 256
        },
        "state": {
          "$ref": "#/definitions/CreateGatewayState"
        }
      },
      "required": [
        "gateway",
        "state"
      ]
    },
    "RegisterLicense": {
      "type": "object",
      "properties": {
        "license": {
          "type": "string",
          "description": "License file",
          "example": "-----BEGIN LICENSE-----\r\n...",
          "maxLength": 10240
        }
      },
      "required": [
        "license"
      ]
    },
    "provider": {
      "type": "string",
      "description": "OAuth2 provider",
      "example": "gmail",
      "enum": [
        "gmail",
        "gmailService",
        "outlook",
        "mailRu"
      ],
      "maxLength": 256,
      "x-convert": {
        "trim": true
      }
    },
    "baseScopes": {
      "type": "string",
      "description": "OAuth2 Base Scopes",
      "example": "imap",
      "enum": [
        "imap",
        "api"
      ],
      "x-convert": {
        "trim": true
      }
    },
    "extraScopes": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "User.Read",
        "maxLength": 255,
        "x-convert": {
          "trim": true
        }
      }
    },
    "skipScopes": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "SMTP.Send",
        "maxLength": 255,
        "x-convert": {
          "trim": true
        }
      }
    },
    "CreateOAuth2App": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Application name",
          "example": "My Gmail App",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "description": {
          "type": "string",
          "description": "Application description",
          "example": "My cool app",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "title": {
          "type": "string",
          "description": "Title for the application button",
          "example": "App title",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "provider": {
          "$ref": "#/definitions/provider"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enable this app",
          "example": true,
          "default": false
        },
        "clientId": {
          "type": "string",
          "description": "Client or Application ID for 3-legged OAuth2 applications",
          "example": "52422112755-3uov8bjwlrullq122rdm6l8ui25ho7qf.apps.googleusercontent.com",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "clientSecret": {
          "type": "string",
          "description": "Client secret for 3-legged OAuth2 applications",
          "example": "boT7Q~dUljnfFdVuqpC11g8nGMjO8kpRAv-ZB",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "baseScopes": {
          "$ref": "#/definitions/baseScopes"
        },
        "extraScopes": {
          "$ref": "#/definitions/extraScopes"
        },
        "skipScopes": {
          "$ref": "#/definitions/skipScopes"
        },
        "serviceClient": {
          "type": "string",
          "description": "Service client ID for 2-legged OAuth2 applications",
          "example": "7103296518315821565203",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "serviceKey": {
          "type": "string",
          "description": "PEM formatted service secret for 2-legged OAuth2 applications",
          "example": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgk...",
          "maxLength": 102400,
          "x-convert": {
            "trim": true
          }
        },
        "authority": {
          "type": "string",
          "description": "Authorization tenant value for Outlook OAuth2 applications",
          "example": "common",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "redirectUrl": {
          "type": "string",
          "description": "Redirect URL for 3-legged OAuth2 applications",
          "example": "https://myservice.com/oauth",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        }
      },
      "required": [
        "name",
        "provider",
        "serviceClient",
        "serviceKey",
        "authority"
      ]
    },
    "CreateAppResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "OAuth2 application ID",
          "example": "AAABhaBPHscAAAAH",
          "maxLength": 256
        },
        "created": {
          "type": "boolean",
          "description": "Was the app created",
          "default": true
        }
      },
      "required": [
        "id"
      ]
    },
    "Settings": {
      "type": "object",
      "properties": {
        "webhooksEnabled": {
          "type": "boolean",
          "description": "If false then do not emit webhooks"
        },
        "webhooks": {
          "type": "string",
          "description": "Webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "webhookEvents": {
          "$ref": "#/definitions/webhookEvents"
        },
        "webhooksCustomHeaders": {
          "$ref": "#/definitions/WebhooksCustomHeaders"
        },
        "notifyHeaders": {
          "$ref": "#/definitions/notifyHeaders"
        },
        "serviceUrl": {
          "type": "string",
          "description": "Base URL of EmailEngine",
          "example": "https://emailengine.example.com",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "trackSentMessages": {
          "type": "boolean",
          "description": "If true, then rewrite html links in sent emails to track opens and clicks"
        },
        "resolveGmailCategories": {
          "type": "boolean",
          "description": "If true, then resolve the category tab for incoming emails"
        },
        "ignoreMailCertErrors": {
          "type": "boolean",
          "description": "If true, then allow insecure certificates for IMAP/SMTP"
        },
        "generateEmailSummary": {
          "type": "boolean",
          "description": "If true, then extracts reply text using OpenAI ChatGPT"
        },
        "generateRiskAssessment": {
          "type": "boolean",
          "description": "(deprecated, not used)"
        },
        "openAiAPIKey": {
          "type": "string",
          "description": "OpenAI API key",
          "example": "verysecr8t"
        },
        "openAiModel": {
          "type": "string",
          "description": "OpenAI API Model",
          "example": "gpt-3.5-turbo"
        },
        "openAiAPIUrl": {
          "type": "string",
          "description": "OpenAI API URL",
          "example": "https://api.openai.com",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "documentStoreChatModel": {
          "type": "string",
          "description": "OpenAI API Model for chat",
          "example": "gpt-3.5-turbo"
        },
        "openAiTemperature": {
          "type": "number",
          "description": "OpenAI Temperature",
          "example": 0.8,
          "minimum": 0,
          "maximum": 2
        },
        "openAiTopP": {
          "type": "number",
          "description": "Top-p sampling",
          "example": 0.1,
          "minimum": 0,
          "maximum": 1
        },
        "openAiPrompt": {
          "type": "string",
          "description": "Prompt to send to LLM for analyzing emails",
          "example": "You are an assistant scanning incoming emails...",
          "maxLength": 6144
        },
        "openAiGenerateEmbeddings": {
          "type": "boolean",
          "description": "If true, then generates vector embeddings for the email"
        },
        "inboxNewOnly": {
          "type": "boolean",
          "description": "If true, then send \"New Email\" webhooks for incoming emails only"
        },
        "serviceSecret": {
          "type": "string",
          "description": "HMAC secret for signing public requests",
          "example": "verysecr8t"
        },
        "authServer": {
          "type": "string",
          "description": "URL to fetch authentication data from",
          "example": "https://myservice.com/authentication",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "proxyEnabled": {
          "type": "boolean",
          "description": "Is the global proxy enabled or not"
        },
        "proxyUrl": {
          "type": "string",
          "description": "Proxy URL",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "smtpEhloName": {
          "type": "string",
          "description": "Hostname to use for the SMTP EHLO/HELO greeting",
          "example": "my.proxy.tld",
          "x-format": {
            "hostname": true
          }
        },
        "notifyText": {
          "type": "boolean",
          "description": "Include message text in webhook notification"
        },
        "notifyWebSafeHtml": {
          "type": "boolean",
          "description": "Pre-process HTML in webhook notification to be web safe"
        },
        "notifyTextSize": {
          "type": "integer",
          "minimum": 0
        },
        "notifyCalendarEvents": {
          "type": "boolean",
          "description": "Include calendar events in webhook notification"
        },
        "gmailEnabled": {
          "type": "boolean",
          "description": "If true then do not show Gmail account option (deprecated)"
        },
        "gmailClientId": {
          "type": "string",
          "description": "Gmail OAuth2 Client ID (deprecated)",
          "maxLength": 256
        },
        "gmailClientSecret": {
          "type": "string",
          "description": "Gmail OAuth2 Client Secret (deprecated)",
          "maxLength": 256
        },
        "gmailRedirectUrl": {
          "type": "string",
          "description": "Gmail OAuth2 Callback URL (deprecated)",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "gmailExtraScopes": {
          "$ref": "#/definitions/gmailExtraScopes"
        },
        "outlookEnabled": {
          "type": "boolean",
          "description": "If true then do not show Outlook account option (deprecated)"
        },
        "outlookClientId": {
          "type": "string",
          "description": "Outlook OAuth2 Client ID (deprecated)",
          "maxLength": 256
        },
        "outlookClientSecret": {
          "type": "string",
          "description": "Outlook OAuth2 Client Secret (deprecated)",
          "maxLength": 256
        },
        "outlookRedirectUrl": {
          "type": "string",
          "description": "Outlook OAuth2 Callback URL (deprecated)",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "outlookAuthority": {
          "$ref": "#/definitions/outlookAuthority"
        },
        "outlookExtraScopes": {
          "$ref": "#/definitions/outlookExtraScopes"
        },
        "mailRuEnabled": {
          "type": "boolean",
          "description": "If true then do not show Mail.ru account option (deprecated)"
        },
        "mailRuClientId": {
          "type": "string",
          "description": "Mail.ru OAuth2 Client ID (deprecated)",
          "maxLength": 256
        },
        "mailRuClientSecret": {
          "type": "string",
          "description": "Mail.ru OAuth2 Client Secret (deprecated)",
          "maxLength": 256
        },
        "mailRuRedirectUrl": {
          "type": "string",
          "description": "Mail.ru OAuth2 Callback URL (deprecated)",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "mailRuExtraScopes": {
          "$ref": "#/definitions/mailRuExtraScopes"
        },
        "serviceClient": {
          "type": "string",
          "description": "OAuth2 Service Client ID (deprecated)",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "serviceKey": {
          "type": "string",
          "description": "OAuth2 Secret Service Key (deprecated)",
          "maxLength": 102400,
          "x-convert": {
            "trim": true
          }
        },
        "serviceExtraScopes": {
          "$ref": "#/definitions/serviceExtraScopes"
        },
        "logs": {
          "$ref": "#/definitions/LogSettings"
        },
        "imapStrategy": {
          "$ref": "#/definitions/imapStrategy"
        },
        "smtpStrategy": {
          "$ref": "#/definitions/smtpStrategy"
        },
        "localAddresses": {
          "$ref": "#/definitions/localAddresses"
        },
        "smtpServerEnabled": {
          "type": "boolean",
          "description": "Enable SMTP Interface"
        },
        "smtpServerPort": {
          "type": "integer",
          "description": "SMTP Interface Port",
          "minimum": 0,
          "maximum": 65536
        },
        "smtpServerHost": {
          "type": "string",
          "description": "SMTP Host to bind to",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          }
        },
        "smtpServerProxy": {
          "type": "boolean",
          "description": "Enable PROXY Protocol for SMTP server"
        },
        "smtpServerAuthEnabled": {
          "type": "boolean",
          "description": "Enable SMTP authentication"
        },
        "smtpServerPassword": {
          "type": "string",
          "description": "SMTP client password. Set to null to disable.",
          "maxLength": 1024
        },
        "smtpServerTLSEnabled": {
          "type": "boolean",
          "description": "Enable TLS for the SMTP interface. Requires a valid certificate."
        },
        "imapProxyServerEnabled": {
          "type": "boolean",
          "description": "Enable IMAP Proxy Interface"
        },
        "imapProxyServerPort": {
          "type": "integer",
          "description": "IMAP Proxy Interface Port",
          "minimum": 0,
          "maximum": 65536
        },
        "imapProxyServerHost": {
          "type": "string",
          "description": "IMAP Proxy Host to bind to",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          }
        },
        "imapProxyServerProxy": {
          "type": "boolean",
          "description": "Enable PROXY Protocol for the IMAP proxy server"
        },
        "imapProxyServerPassword": {
          "type": "string",
          "description": "IMAP proxy client password. Set to null to disable.",
          "maxLength": 1024
        },
        "imapProxyServerTLSEnabled": {
          "type": "boolean",
          "description": "Enable TLS for the IMAP proxy interface. Requires a valid certificate."
        },
        "queueKeep": {
          "type": "integer",
          "description": "How many completed or failed queue entries to keep",
          "minimum": 0
        },
        "deliveryAttempts": {
          "type": "integer",
          "description": "How many times to retry an email sending before it is considered as failing",
          "minimum": 0
        },
        "templateHeader": {
          "type": "string",
          "description": "HTML code displayed on the top of public pages like the hosted authentication form",
          "maxLength": 1048576,
          "x-convert": {
            "trim": true
          }
        },
        "scriptEnv": {
          "type": "string",
          "description": "JSON object to be used as the `env` variable in pre-processing scripts",
          "example": "{\"key\": \"value\"}",
          "maxLength": 1048576,
          "x-convert": {
            "trim": true
          }
        },
        "enableApiProxy": {
          "type": "boolean",
          "description": "Enable support for reverse proxies"
        },
        "documentStoreEnabled": {
          "type": "boolean",
          "description": "Enable Document Store syncing"
        },
        "documentStoreUrl": {
          "type": "string",
          "description": "Document Store URL",
          "example": "https://localhost:9200",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "documentStoreIndex": {
          "type": "string",
          "description": "Document Store index name",
          "maxLength": 1024
        },
        "documentStoreAuthEnabled": {
          "type": "boolean",
          "description": "Enable Document Store authentication"
        },
        "documentStoreUsername": {
          "type": "string",
          "description": "Document Store username",
          "maxLength": 1024
        },
        "documentStorePassword": {
          "type": "string",
          "description": "Document Store password",
          "maxLength": 1024
        },
        "documentStoreGenerateEmbeddings": {
          "type": "boolean",
          "description": "If true, then generates vector embeddings for the email and stores these in the Document Store"
        },
        "documentStorePreProcessingEnabled": {
          "type": "boolean",
          "description": "Enable Document Store pre-processing"
        },
        "locale": {
          "$ref": "#/definitions/locale"
        },
        "timezone": {
          "type": "string",
          "description": "Default timezone identifier",
          "example": "Europe/Tallinn",
          "maxLength": 100
        },
        "openAiPreProcessingFn": {
          "type": "string",
          "description": "Filter function for LLM pre-processing (JavaScript)",
          "example": "return true; // passes all emails",
          "maxLength": 524288
        },
        "documentStorePreProcessingFn": {
          "type": "string",
          "description": "Filter function for Document Store pre-processing (JavaScript)",
          "example": "return true; // passes all emails",
          "maxLength": 524288
        },
        "documentStorePreProcessingMap": {
          "type": "string",
          "description": "Mapping function for Document Store pre-processing (JavaScript)",
          "example": "return payload; // returns unmodified data",
          "maxLength": 524288
        }
      }
    },
    "UpdatedSettings": {
      "type": "array",
      "description": "List of updated setting keys",
      "items": {
        "type": "string",
        "example": "notifyHeaders"
      }
    },
    "SettingsUpdatedResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "$ref": "#/definitions/UpdatedSettings"
        }
      }
    },
    "TokenScope": {
      "type": "string",
      "enum": [
        "api",
        "smtp",
        "imap-proxy"
      ]
    },
    "Scopes": {
      "type": "array",
      "default": [
        "api"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/TokenScope"
      }
    },
    "CreateToken": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "description": {
          "type": "string",
          "description": "Token description",
          "example": "Token description",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "scopes": {
          "$ref": "#/definitions/Scopes"
        },
        "metadata": {
          "type": "string",
          "description": "Related metadata in JSON format",
          "example": "{\"example\": \"value\"}",
          "maxLength": 1048576
        },
        "restrictions": {
          "$ref": "#/definitions/TokenRestrictions"
        },
        "ip": {
          "type": "string",
          "description": "IP address of the requestor",
          "example": "127.0.0.1",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          },
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "account",
        "description",
        "scopes"
      ]
    },
    "CreateTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Access token",
          "example": "123456",
          "x-constraint": {
            "length": 64
          },
          "x-format": {
            "hex": {
              "byteAligned": false,
              "prefix": false
            }
          }
        }
      },
      "required": [
        "token"
      ]
    },
    "VerifyAccount": {
      "type": "object",
      "properties": {
        "mailboxes": {
          "type": "boolean",
          "description": "Include mailbox listing in response",
          "example": false,
          "default": false
        },
        "imap": {
          "$ref": "#/definitions/ImapConfiguration"
        },
        "smtp": {
          "$ref": "#/definitions/SmtpConfiguration"
        },
        "proxy": {
          "type": "string",
          "description": "Proxy URL",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "smtpEhloName": {
          "type": "string",
          "description": "Hostname to use for the SMTP EHLO/HELO greeting",
          "example": "my.proxy.tld",
          "x-format": {
            "hostname": true
          }
        }
      }
    },
    "imap": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Was IMAP account verified",
          "example": true
        },
        "error": {
          "type": "string",
          "description": "Error messages for IMAP verification. Only present if success=false",
          "example": "Something went wrong"
        },
        "code": {
          "type": "string",
          "description": "Error code. Only present if success=false",
          "example": "ERR_SSL_WRONG_VERSION_NUMBER"
        },
        "responseText": {
          "type": "string",
          "description": "Response Message",
          "example": "Invalid credentials (Failure)"
        }
      }
    },
    "smtp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Was SMTP account verified",
          "example": true
        },
        "error": {
          "type": "string",
          "description": "Error messages for SMTP verification. Only present if success=false",
          "example": "Something went wrong"
        },
        "code": {
          "type": "string",
          "description": "Error code. Only present if success=false",
          "example": "ERR_SSL_WRONG_VERSION_NUMBER"
        },
        "responseText": {
          "type": "string",
          "description": "Response Message",
          "example": "Invalid credentials (Failure)"
        }
      }
    },
    "MailboxShortResponseItem": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Full path to mailbox",
          "example": "Kalender/S&APw-nnip&AOQ-evad"
        },
        "delimiter": {
          "type": "string",
          "example": "/"
        },
        "parentPath": {
          "type": "string",
          "description": "Full path to parent mailbox",
          "example": "Kalender"
        },
        "name": {
          "type": "string",
          "description": "Maibox name",
          "example": "SÃ¼nnipÃ¤evad"
        },
        "listed": {
          "type": "boolean",
          "description": "Was the mailbox found from the output of LIST command",
          "example": true
        },
        "subscribed": {
          "type": "boolean",
          "description": "Was the mailbox found from the output of LSUB command",
          "example": true
        },
        "specialUse": {
          "$ref": "#/definitions/MailboxSpecialUse"
        }
      },
      "required": [
        "path",
        "parentPath",
        "name"
      ]
    },
    "mailboxes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MailboxShortResponseItem"
      }
    },
    "VerifyAccountResponse": {
      "type": "object",
      "properties": {
        "imap": {
          "$ref": "#/definitions/imap"
        },
        "smtp": {
          "$ref": "#/definitions/smtp"
        },
        "mailboxes": {
          "$ref": "#/definitions/mailboxes"
        }
      }
    },
    "AccountFormPath": {
      "type": "array",
      "description": "Check changes only on selected paths. Either a single string path or an array of paths. Can use references like `\"\\Sent\"` or `\"\\Inbox\"`. Set to `null` to unset.",
      "example": [
        "*"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "description": "Check changes only on selected paths. Either a single string path or an array of paths. Can use references like `\"\\Sent\"` or `\"\\Inbox\"`. Set to `null` to unset.",
        "example": "INBOX",
        "maxLength": 1024
      }
    },
    "DefaultAccountType": {
      "type": "string",
      "description": "Display the form for the specified account type (either \"imap\" or an OAuth2 app ID) instead of allowing the user to choose",
      "example": "imap"
    },
    "RequestAuthForm": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID. If the provided value is `null` then an unique ID will be autogenerated. Using an existing account ID will update settings for that existing account.",
          "example": "example",
          "default": null,
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "name": {
          "type": "string",
          "description": "Display name for the account",
          "example": "My Email Account",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "Default email address of the account",
          "example": "user@example.com",
          "x-format": {
            "email": true
          }
        },
        "delegated": {
          "type": "boolean",
          "description": "If true then acts as a shared mailbox. Available for MS365 OAuth2 accounts.",
          "default": false
        },
        "syncFrom": {
          "type": "string",

          "description": "Sync messages to document store starting from provided date. If not set, all emails are synced.",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "notifyFrom": {
          "type": "string",

          "description": "Send webhooks for messages starting from provided date. The default is the account creation date.",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "subconnections": {
          "$ref": "#/definitions/SubconnectionPaths"
        },
        "path": {
          "$ref": "#/definitions/AccountFormPath"
        },
        "redirectUrl": {
          "type": "string",
          "description": "The user will be redirected to this URL after submitting the authentication form",
          "example": "https://myapp/account/settings.php",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "type": {
          "type": "string",
          "description": "Display the form for the specified account type (either \"imap\" or an OAuth2 app ID) instead of allowing the user to choose",
          "example": "imap"
        }
      },
      "required": [
        "redirectUrl"
      ]
    },
    "RequestAuthFormResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Generated URL to the hosted authentication form",
          "example": "https://ee.example.com/accounts/new?data=eyJhY2NvdW50IjoiZXhh...L0W_BkFH5HW6Krwmr7c&type=imap",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        }
      },
      "required": [
        "url"
      ]
    },
    "BlocklistListAddPayload": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "recipient": {
          "type": "string",
          "description": "Email address to add to the list",
          "example": "user@example.com",
          "x-format": {
            "email": true
          }
        },
        "reason": {
          "type": "string",
          "description": "Identifier for the blocking reason",
          "default": "block"
        }
      },
      "required": [
        "account",
        "recipient"
      ]
    },
    "BlocklistListAddResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Was the request successful",
          "example": true
        },
        "added": {
          "type": "boolean",
          "description": "Was the address added to the list",
          "example": true
        }
      }
    },
    "RequestChat": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "description": "Chat message to use",
          "example": "When did Jason last message me?",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "question"
      ]
    },
    "Model1": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "Model2": {
      "type": "array",
      "description": "List of addresses",
      "example": [
        {
          "address": "recipient@example.com"
        }
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model1"
      }
    },
    "ChatResponseMessage": {
      "type": "object",
      "description": "Email that best matched the question",
      "properties": {
        "id": {
          "type": "string",
          "description": "Message ID",
          "example": "AAAAAgAACrI"
        },
        "path": {
          "type": "string",
          "description": "Folder this message was found from",
          "example": "INBOX"
        },
        "date": {
          "type": "string",

          "description": "Date of the email",
          "example": "2023-09-29T10:03:49.000Z"
        },
        "from": {
          "$ref": "#/definitions/FromAddress"
        },
        "to": {
          "$ref": "#/definitions/Model2"
        },
        "subject": {
          "type": "string",
          "description": "Message subject",
          "example": "What a wonderful message"
        },
        "messageSpecialUse": {
          "$ref": "#/definitions/MessageSpecialUse"
        }
      }
    },
    "ChatResponseMessages": {
      "type": "array",
      "description": "Emails that best matched the question",
      "items": {
        "$ref": "#/definitions/ChatResponseMessage"
      }
    },
    "ReturnChatResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Was the request successful",
          "example": true
        },
        "answer": {
          "type": "string",
          "description": "Chat response",
          "example": "Last tuesday",
          "x-convert": {
            "trim": true
          }
        },
        "messages": {
          "$ref": "#/definitions/ChatResponseMessages"
        }
      },
      "required": [
        "answer"
      ]
    },
    "CreateTemplateContent": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "Message subject",
          "example": "What a wonderful message",
          "maxLength": 10240,
          "x-convert": {
            "trim": true
          }
        },
        "text": {
          "type": "string",
          "description": "Message Text",
          "example": "Hello from myself!",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "html": {
          "type": "string",
          "description": "Message HTML",
          "example": "<p>Hello from myself!</p>",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "previewText": {
          "type": "string",
          "description": "Preview text appears in the inbox after the subject line",
          "example": "Welcome to our newsletter!",
          "maxLength": 1024
        }
      }
    },
    "CreateTemplate": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID. Use `null` for public templates.",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the template",
          "example": "Transaction receipt",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Optional description of the template",
          "example": "Something about the template",
          "maxLength": 1024
        },
        "format": {
          "$ref": "#/definitions/format"
        },
        "content": {
          "$ref": "#/definitions/CreateTemplateContent"
        }
      },
      "required": [
        "account",
        "name",
        "content"
      ]
    },
    "CreateTemplateResponse": {
      "type": "object",
      "properties": {
        "created": {
          "type": "boolean",
          "description": "Was the template created or not"
        },
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "id": {
          "type": "string",
          "description": "Template ID",
          "example": "example",
          "maxLength": 256
        }
      },
      "required": [
        "account",
        "id"
      ]
    },
    "UnifiedSearchAccounts": {
      "type": "array",
      "description": "Optional list of account ID values",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "example": "example",
        "maxLength": 256,
        "x-convert": {
          "trim": true
        }
      }
    },
    "UnifiedSearchPaths": {
      "type": "array",
      "description": "Optional list of mailbox folder paths or specialUse flags",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "example": "INBOX"
      }
    },
    "Headers": {
      "type": "object",
      "description": "Headers to match against"
    },
    "SearchQuery": {
      "type": "object",
      "description": "Search query to filter messages",
      "properties": {
        "seq": {
          "type": "string",
          "description": "Sequence number range. Not allowed with `documentStore`.",
          "maxLength": 8192
        },
        "answered": {
          "type": "boolean",
          "description": "Check if message is answered or not"
        },
        "deleted": {
          "type": "boolean",
          "description": "Check if message is marked for being deleted or not"
        },
        "draft": {
          "type": "boolean",
          "description": "Check if message is a draft"
        },
        "unseen": {
          "type": "boolean",
          "description": "Check if message is marked as unseen or not"
        },
        "flagged": {
          "type": "boolean",
          "description": "Check if message is flagged or not"
        },
        "seen": {
          "type": "boolean",
          "description": "Check if message is marked as seen or not"
        },
        "from": {
          "type": "string",
          "description": "Match From: header",
          "maxLength": 256
        },
        "to": {
          "type": "string",
          "description": "Match To: header",
          "maxLength": 256
        },
        "cc": {
          "type": "string",
          "description": "Match Cc: header",
          "maxLength": 256
        },
        "bcc": {
          "type": "string",
          "description": "Match Bcc: header",
          "maxLength": 256
        },
        "body": {
          "type": "string",
          "description": "Match text body",
          "maxLength": 256
        },
        "subject": {
          "type": "string",
          "description": "Match message subject",
          "maxLength": 2560
        },
        "larger": {
          "type": "integer",
          "description": "Matches messages larger than value",
          "minimum": 0,
          "maximum": 1073741824
        },
        "smaller": {
          "type": "integer",
          "description": "Matches messages smaller than value",
          "minimum": 0,
          "maximum": 1073741824
        },
        "uid": {
          "type": "string",
          "description": "UID range",
          "maxLength": 8192
        },
        "modseq": {
          "type": "integer",
          "description": "Matches messages with modseq higher than value. Not allowed with `documentStore`.",
          "minimum": 0
        },
        "before": {
          "type": "string",

          "description": "Matches messages received before date"
        },
        "since": {
          "type": "string",

          "description": "Matches messages received after date"
        },
        "sentBefore": {
          "type": "string",

          "description": "Matches messages sent before date"
        },
        "sentSince": {
          "type": "string",

          "description": "Matches messages sent after date"
        },
        "emailId": {
          "type": "string",
          "description": "Match specific Gmail unique email UD",
          "maxLength": 256
        },
        "threadId": {
          "type": "string",
          "description": "Match specific Gmail unique thread UD",
          "maxLength": 256
        },
        "header": {
          "$ref": "#/definitions/Headers"
        },
        "gmailRaw": {
          "type": "string",
          "description": "Raw Gmail search string. Will return an error if used for other account types.",
          "example": "has:attachment in:unread",
          "maxLength": 1024
        }
      }
    },
    "DocumentQuery": {
      "type": "object",
      "description": "Document Store query"
    },
    "UnifiedSearchQuery": {
      "type": "object",
      "properties": {
        "accounts": {
          "$ref": "#/definitions/UnifiedSearchAccounts"
        },
        "paths": {
          "$ref": "#/definitions/UnifiedSearchPaths"
        },
        "search": {
          "$ref": "#/definitions/SearchQuery"
        },
        "documentQuery": {
          "$ref": "#/definitions/DocumentQuery"
        }
      },
      "required": [
        "search"
      ]
    },
    "action": {
      "type": "string",
      "example": "reply",
      "default": "reply",
      "enum": [
        "forward",
        "reply"
      ],
      "x-convert": {
        "case": "lower"
      }
    },
    "MessageReference": {
      "type": "object",
      "description": "Message reference for a reply or a forward. This is EmailEngine specific ID, not Message-ID header value.",
      "properties": {
        "message": {
          "type": "string",
          "description": "Referenced message ID",
          "example": "AAAAAQAACnA",
          "maxLength": 256
        },
        "action": {
          "$ref": "#/definitions/action"
        },
        "inline": {
          "type": "boolean",
          "description": "If true, then blockquotes the email that is being replied to",
          "default": false
        },
        "forwardAttachments": {
          "type": "boolean",
          "description": "If true, then includes attachments in forwarded message",
          "default": false
        },
        "ignoreMissing": {
          "type": "boolean",
          "description": "If true, then processes the email even if the original message is not available anymore",
          "default": false
        },
        "documentStore": {
          "type": "boolean",
          "description": "If enabled then fetch the data from the Document Store instead of IMAP",
          "default": false
        }
      },
      "required": [
        "message"
      ]
    },
    "Model3": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "example": "recipient@example.com",
        "x-format": {
          "email": true
        }
      }
    },
    "SMTPEnvelope": {
      "type": "object",
      "description": "Optional SMTP envelope. If not set then derived from message headers.",
      "properties": {
        "from": {
          "type": "string",
          "example": "sender@example.com",
          "x-format": {
            "email": true
          }
        },
        "to": {
          "$ref": "#/definitions/Model3"
        }
      }
    },
    "ReplyToAddress": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "ReplyTo": {
      "type": "array",
      "description": "List of Reply-To addresses",
      "example": [
        {
          "name": "From Me",
          "address": "sender@example.com"
        }
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/ReplyToAddress"
      }
    },
    "ToAddress": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "ToAddressList": {
      "type": "array",
      "description": "List of recipient addresses",
      "example": [
        {
          "address": "recipient@example.com"
        }
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/ToAddress"
      }
    },
    "CcAddress": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "CcAddressList": {
      "type": "array",
      "description": "List of CC addresses",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/CcAddress"
      }
    },
    "BccAddress": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "BccAddressList": {
      "type": "array",
      "description": "List of BCC addresses",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/BccAddress"
      }
    },
    "RenderValues": {
      "type": "object",
      "description": "An object of variables for the template renderer"
    },
    "render": {
      "type": "object",
      "description": "Template rendering options",
      "enum": [
        false
      ],
      "properties": {
        "format": {
          "$ref": "#/definitions/format"
        },
        "params": {
          "$ref": "#/definitions/RenderValues"
        }
      }
    },
    "MailMergeListEntry": {
      "type": "object",
      "properties": {
        "to": {
          "$ref": "#/definitions/ToAddress"
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>",
          "maxLength": 996
        },
        "params": {
          "$ref": "#/definitions/RenderValues"
        },
        "sendAt": {
          "type": "string",

          "description": "Send message at specified time. Overrides message level `sendAt` value.",
          "example": "2021-07-08T07:06:34.336Z"
        }
      },
      "required": [
        "to"
      ]
    },
    "MailMergeList": {
      "type": "array",
      "description": "Mail merge options. A separate email is generated for each recipient. Using mail merge disables `messageId`, `envelope`, `to`, `cc`, `bcc`, `render` keys for the message root.",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/MailMergeListEntry"
      }
    },
    "contentDisposition": {
      "type": "string",
      "enum": [
        "inline",
        "attachment"
      ],
      "x-convert": {
        "case": "lower"
      }
    },
    "encoding": {
      "type": "string",
      "default": "base64",
      "enum": [
        "base64"
      ]
    },
    "reference": {
      "type": "string",
      "description": "Reference an existing attachment ID instead of providing attachment content. If set, then `content` option is not allowed. Otherwise `content` is required.",
      "example": "AAAAAQAACnAcde",
      "enum": [
        false
      ],
      "maxLength": 256
    },
    "UploadAttachment": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "example": "transparent.gif",
          "maxLength": 256
        },
        "content": {
          "type": "string",
          "description": "Base64 formatted attachment file",
          "example": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",
          "maxLength": 5242880
        },
        "contentType": {
          "type": "string",
          "example": "image/gif",
          "maxLength": 256,
          "x-convert": {
            "case": "lower"
          }
        },
        "contentDisposition": {
          "$ref": "#/definitions/contentDisposition"
        },
        "cid": {
          "type": "string",
          "description": "Content-ID value for embedded images",
          "example": "unique-image-id@localhost",
          "maxLength": 256
        },
        "encoding": {
          "$ref": "#/definitions/encoding"
        },
        "reference": {
          "$ref": "#/definitions/reference"
        }
      },
      "required": [
        "content"
      ]
    },
    "UploadAttachmentList": {
      "type": "array",
      "description": "List of attachments",
      "items": {
        "$ref": "#/definitions/UploadAttachment"
      }
    },
    "CustomHeaders": {
      "type": "object",
      "description": "Custom Headers"
    },
    "return": {
      "type": "string",
      "description": "Specifies if only headers or the entire body of the message should be included in the response (RET)",
      "enum": [
        "headers",
        "full"
      ],
      "x-convert": {
        "trim": true
      }
    },
    "NotifyEntry": {
      "type": "string",
      "enum": [
        "never",
        "success",
        "failure",
        "delay"
      ]
    },
    "notify": {
      "type": "array",
      "description": "Defines the conditions under which a DSN response should be sent",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/NotifyEntry"
      }
    },
    "DSN": {
      "type": "object",
      "description": "Request DNS notifications",
      "properties": {
        "id": {
          "type": "string",
          "description": "The envelope identifier that would be included in the response (ENVID)",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "return": {
          "$ref": "#/definitions/return"
        },
        "notify": {
          "$ref": "#/definitions/notify"
        },
        "recipient": {
          "type": "string",
          "description": "The email address the DSN should be sent (ORCPT)",
          "x-format": {
            "email": true
          },
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "return"
      ]
    },
    "SubmitMessage": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/MessageReference"
        },
        "envelope": {
          "$ref": "#/definitions/SMTPEnvelope"
        },
        "raw": {
          "type": "string",
          "description": "Base64 encoded email message in rfc822 format. If you provide other keys as well then these will override the values in the raw message.",
          "example": "TUlNRS1WZXJzaW9uOiAxLjANClN1YmplY3Q6IGhlbGxvIHdvcmxkDQoNCkhlbGxvIQ0K",
          "maxLength": 5242880
        },
        "from": {
          "$ref": "#/definitions/FromAddress"
        },
        "replyTo": {
          "$ref": "#/definitions/ReplyTo"
        },
        "to": {
          "$ref": "#/definitions/ToAddressList"
        },
        "cc": {
          "$ref": "#/definitions/CcAddressList"
        },
        "bcc": {
          "$ref": "#/definitions/BccAddressList"
        },
        "subject": {
          "type": "string",
          "description": "Message subject",
          "example": "What a wonderful message",
          "maxLength": 10240,
          "x-convert": {
            "trim": true
          }
        },
        "text": {
          "type": "string",
          "description": "Message Text",
          "example": "Hello from myself!",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "html": {
          "type": "string",
          "description": "Message HTML",
          "example": "<p>Hello from myself!</p>",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "previewText": {
          "type": "string",
          "description": "Preview text appears in the inbox after the subject line",
          "example": "Welcome to our newsletter!",
          "maxLength": 1024
        },
        "template": {
          "type": "string",
          "description": "Stored template ID to load the email content from",
          "example": "example",
          "maxLength": 256
        },
        "render": {
          "$ref": "#/definitions/render"
        },
        "mailMerge": {
          "$ref": "#/definitions/MailMergeList"
        },
        "attachments": {
          "$ref": "#/definitions/UploadAttachmentList"
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>",
          "maxLength": 996
        },
        "headers": {
          "$ref": "#/definitions/CustomHeaders"
        },
        "trackingEnabled": {
          "type": "boolean",
          "description": "Should EmailEngine track clicks and opens for this message",
          "example": false
        },
        "copy": {
          "type": "boolean",
          "description": "If set then either copies the message to the Sent Mail folder or not. If not set then uses the account's default setting.",
          "example": null
        },
        "sentMailPath": {
          "type": "string",
          "description": "Upload sent message to this folder. By default the account's Sent Mail folder is used.",
          "example": "Sent Mail",
          "maxLength": 1024
        },
        "locale": {
          "type": "string",
          "description": "Optional locale",
          "example": "fr",
          "maxLength": 100
        },
        "tz": {
          "type": "string",
          "description": "Optional timezone",
          "example": "Europe/Tallinn",
          "maxLength": 100
        },
        "sendAt": {
          "type": "string",

          "description": "Send message at specified time",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "deliveryAttempts": {
          "type": "integer",
          "description": "How many delivery attempts to make until message is considered as failed",
          "example": 10
        },
        "gateway": {
          "type": "string",
          "description": "Optional SMTP gateway ID for message routing",
          "example": "example",
          "maxLength": 256
        },
        "listId": {
          "type": "string",
          "description": "List ID for Mail Merge. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list.",
          "example": "test-list",
          "x-format": {
            "hostname": true
          }
        },
        "dsn": {
          "$ref": "#/definitions/DSN"
        },
        "baseUrl": {
          "type": "string",
          "description": "Optional base URL for trackers. This URL must point to your EmailEngine instance.",
          "example": "https://customer123.myservice.com",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          },
          "x-convert": {
            "trim": true
          }
        },
        "proxy": {
          "type": "string",
          "description": "Optional proxy URL to use when connecting to the SMTP server",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "localAddress": {
          "type": "string",
          "description": "Optional local IP address to bind to when connecting to the SMTP server",
          "example": "127.0.0.1",
          "x-format": {
            "ip": {
              "cidr": "forbidden",
              "version": [
                "ipv4",
                "ipv6"
              ]
            }
          },
          "x-convert": {
            "trim": true
          }
        },
        "dryRun": {
          "type": "boolean",
          "description": "If true, then EmailEngine does not send the email and returns an RFC822 formatted email file. Tracking information is not added to the email.",
          "default": false
        }
      }
    },
    "ResponseReference": {
      "type": "object",
      "description": "Reference info if referencing was requested",
      "properties": {
        "message": {
          "type": "string",
          "description": "Referenced message ID",
          "example": "AAAAAQAACnA",
          "maxLength": 256
        },
        "documentStore": {
          "type": "boolean",
          "description": "Was the message dat aloaded from the document store",
          "example": true
        },
        "success": {
          "type": "boolean",
          "description": "Was the referenced message processed successfully",
          "example": true
        },
        "error": {
          "type": "string",
          "description": "An error message if referenced message processing failed",
          "example": "Referenced message was not found"
        }
      },
      "required": [
        "message"
      ]
    },
    "ToAddressSingle": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Some Name",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "address": {
          "type": "string",
          "example": "user@example.com",
          "x-format": {
            "email": {
              "ignoreLength": false
            }
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "skipped": {
      "type": "object",
      "description": "Info about skipped message. If this value is set, then the message was not sent",
      "properties": {
        "reason": {
          "type": "string",
          "description": "Why this message was skipped",
          "example": "unsubscribe"
        },
        "listId": {
          "type": "string",
          "example": "test-list"
        }
      }
    },
    "BulkResponseEntry": {
      "type": "object",
      "example": {
        "success": true,
        "to": {
          "name": "Andris 2",
          "address": "andris@ethereal.email"
        },
        "messageId": "<19b9c433-d428-f6d8-1d00-d666ebcadfc4@ekiri.ee>",
        "queueId": "1812477338914c8372a",
        "reference": {
          "message": "AAAAAQAACnA",
          "success": true
        },
        "sendAt": "2021-07-08T07:06:34.336Z"
      },
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Was the referenced message processed successfully",
          "example": true
        },
        "to": {
          "$ref": "#/definitions/ToAddressSingle"
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>",
          "maxLength": 996
        },
        "queueId": {
          "type": "string",
          "description": "Queue identifier for scheduled email. Not present for bulk messages.",
          "example": "d41f0423195f271f"
        },
        "reference": {
          "$ref": "#/definitions/ResponseReference"
        },
        "sendAt": {
          "type": "string",

          "description": "Send message at specified time. Overrides message level `sendAt` value.",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "skipped": {
          "$ref": "#/definitions/skipped"
        }
      }
    },
    "BulkResponseList": {
      "type": "array",
      "description": "Bulk message responses",
      "items": {
        "$ref": "#/definitions/BulkResponseEntry"
      }
    },
    "SubmitMessageResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "string",
          "example": "Queued for delivery"
        },
        "messageId": {
          "type": "string",
          "description": "Message-ID header value. Not present for bulk messages.",
          "example": "<a2184d08-a470-fec6-a493-fa211a3756e9@example.com>"
        },
        "queueId": {
          "type": "string",
          "description": "Queue identifier for scheduled email. Not present for bulk messages.",
          "example": "d41f0423195f271f"
        },
        "sendAt": {
          "type": "string",

          "description": "Scheduled send time",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "reference": {
          "$ref": "#/definitions/ResponseReference"
        },
        "preview": {
          "type": "string",
          "description": "Base64 encoded RFC822 email if a preview was requested",
          "example": "Q29udGVudC1UeXBlOiBtdWx0aX..."
        },
        "mailMerge": {
          "$ref": "#/definitions/BulkResponseList"
        }
      }
    },
    "Model4": {
      "type": "object",
      "description": "Document Store query. Only allowed with `documentStore`."
    },
    "Model5": {
      "type": "object",
      "properties": {
        "search": {
          "$ref": "#/definitions/SearchQuery"
        },
        "documentQuery": {
          "$ref": "#/definitions/Model4"
        }
      },
      "required": [
        "search"
      ]
    },
    "MailboxPath": {
      "type": "array",
      "description": "Mailbox path as an array or a string. If account is namespaced then namespace prefix is added by default.",
      "example": [
        "Parent folder",
        "Subfolder"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 256
      }
    },
    "CreateMailbox": {
      "type": "object",
      "properties": {
        "path": {
          "$ref": "#/definitions/MailboxPath"
        }
      }
    },
    "CreateMailboxResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Full path to mailbox",
          "example": "Kalender/S&APw-nnip&AOQ-evad"
        },
        "mailboxId": {
          "type": "string",
          "description": "Mailbox ID (if server has support)",
          "example": "1439876283476"
        },
        "created": {
          "type": "boolean",
          "description": "Was the mailbox created",
          "example": true
        }
      },
      "required": [
        "path"
      ]
    },
    "Flags": {
      "type": "array",
      "description": "Message flags",
      "example": [
        "\\Seen",
        "\\Draft"
      ],
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "Model6": {
      "type": "array",
      "description": "List of addresses",
      "example": [
        {
          "address": "recipient@example.com"
        }
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model1"
      }
    },
    "Model7": {
      "type": "array",
      "description": "List of addresses",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model1"
      }
    },
    "Model8": {
      "type": "array",
      "description": "List of addresses",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model1"
      }
    },
    "MessageUpload": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Target mailbox folder path",
          "example": "INBOX"
        },
        "flags": {
          "$ref": "#/definitions/Flags"
        },
        "internalDate": {
          "type": "string",

          "description": "Sets the internal date for this message",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "reference": {
          "$ref": "#/definitions/MessageReference"
        },
        "raw": {
          "type": "string",
          "description": "Base64 encoded email message in rfc822 format. If you provide other keys as well then these will override the values in the raw message.",
          "example": "TUlNRS1WZXJzaW9uOiAxLjANClN1YmplY3Q6IGhlbGxvIHdvcmxkDQoNCkhlbGxvIQ0K",
          "maxLength": 5242880
        },
        "from": {
          "$ref": "#/definitions/FromAddress"
        },
        "to": {
          "$ref": "#/definitions/Model6"
        },
        "cc": {
          "$ref": "#/definitions/Model7"
        },
        "bcc": {
          "$ref": "#/definitions/Model8"
        },
        "subject": {
          "type": "string",
          "description": "Message subject",
          "example": "What a wonderful message",
          "maxLength": 10240
        },
        "text": {
          "type": "string",
          "description": "Message Text",
          "example": "Hello from myself!",
          "maxLength": 5242880
        },
        "html": {
          "type": "string",
          "description": "Message HTML",
          "example": "<p>Hello from myself!</p>",
          "maxLength": 5242880
        },
        "attachments": {
          "$ref": "#/definitions/UploadAttachmentList"
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>",
          "maxLength": 996
        },
        "headers": {
          "$ref": "#/definitions/CustomHeaders"
        },
        "locale": {
          "type": "string",
          "description": "Optional locale",
          "example": "fr",
          "maxLength": 100
        },
        "tz": {
          "type": "string",
          "description": "Optional timezone",
          "example": "Europe/Tallinn",
          "maxLength": 100
        }
      },
      "required": [
        "path"
      ]
    },
    "Model9": {
      "type": "object",
      "description": "Reference info if referencing was requested",
      "properties": {
        "message": {
          "type": "string",
          "description": "Referenced message ID",
          "example": "AAAAAQAACnA",
          "maxLength": 256
        },
        "success": {
          "type": "boolean",
          "description": "Was the referenced message processed",
          "example": true
        },
        "documentStore": {
          "type": "boolean",
          "description": "If enabled then fetch the data from the Document Store instead of IMAP",
          "default": false
        },
        "error": {
          "type": "string",
          "description": "An error message if referenced message processing failed",
          "example": "Referenced message was not found"
        }
      },
      "required": [
        "message"
      ]
    },
    "MessageUploadResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Message ID. NB! This and other fields might not be present if server did not provide enough information",
          "example": "AAAAAgAACrI"
        },
        "path": {
          "type": "string",
          "description": "Folder this message was uploaded to",
          "example": "INBOX"
        },
        "uid": {
          "type": "integer",
          "description": "UID of uploaded message",
          "example": 12345
        },
        "uidValidity": {
          "type": "string",
          "description": "UIDVALIDTITY of the target folder. Numeric value cast as string.",
          "example": "12345"
        },
        "seq": {
          "type": "integer",
          "description": "Sequence number of uploaded message",
          "example": 12345
        },
        "messageId": {
          "type": "string",
          "description": "Message ID",
          "example": "<test123@example.com>",
          "maxLength": 996
        },
        "reference": {
          "$ref": "#/definitions/Model9"
        }
      }
    },
    "gateway": {
      "type": "string",
      "description": "Optional gateway ID",
      "example": false,
      "enum": [
        false
      ],
      "maxLength": 256
    },
    "DeliveryStartRequest": {
      "type": "object",
      "properties": {
        "gateway": {
          "$ref": "#/definitions/gateway"
        }
      }
    },
    "DeliveryStartResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Was the test started",
          "example": true
        },
        "deliveryTest": {
          "type": "string",
          "description": "Test ID",
          "example": "6420a6ad-7f82-4e4f-8112-82a9dad1f34d",
          "x-format": {
            "guid": {
              "version": [
                "uuidv4",
                "uuidv5"
              ]
            }
          }
        }
      }
    },
    "EmptyLicenseResponse": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "details": {
          "type": "boolean",
          "example": false
        },
        "type": {
          "type": "string",
          "example": "SSPL-1.0-or-later"
        }
      }
    },
    "DeleteRequestResponse": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "deleted": {
          "type": "boolean",
          "description": "Was the account deleted",
          "default": true
        }
      },
      "required": [
        "account"
      ]
    },
    "DeleteBlocklistResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Was the address removed from the list",
          "default": true
        }
      }
    },
    "Model10": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "Gateway ID",
          "example": "example",
          "maxLength": 256
        },
        "deleted": {
          "type": "boolean",
          "description": "Was the gateway deleted",
          "default": true
        }
      },
      "required": [
        "gateway"
      ]
    },
    "DeleteAppRequestResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "OAuth2 application ID",
          "example": "AAABhaBPHscAAAAH",
          "maxLength": 256
        },
        "deleted": {
          "type": "boolean",
          "description": "Was the gateway deleted",
          "default": true
        },
        "accounts": {
          "type": "integer",
          "description": "The number of accounts registered with this application. Not available for legacy apps.",
          "example": 12
        }
      },
      "required": [
        "id"
      ]
    },
    "DeleteOutboxEntryResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Was the message deleted",
          "default": true
        }
      }
    },
    "DeleteTokenRequestResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Was the account deleted",
          "default": true
        }
      }
    },
    "DeleteMailboxResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Full path to mailbox",
          "example": "Kalender/S&APw-nnip&AOQ-evad"
        },
        "deleted": {
          "type": "boolean",
          "description": "Was the mailbox deleted",
          "example": true
        }
      },
      "required": [
        "path"
      ]
    },
    "DeleteTemplateRequestResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Was the account flushed",
          "default": true
        },
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "account"
      ]
    },
    "Model11": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Was the template deleted",
          "default": true
        },
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "id": {
          "type": "string",
          "description": "Template ID",
          "example": "AAABgS-UcAYAAAABAA",
          "maxLength": 256
        }
      },
      "required": [
        "account",
        "id"
      ]
    },
    "moved": {
      "type": "object",
      "description": "Present if message was moved to Trash",
      "properties": {
        "destination": {
          "type": "string",
          "description": "Trash folder path",
          "example": "Trash"
        },
        "message": {
          "type": "string",
          "description": "Message ID in Trash",
          "example": "AAAAAwAAAWg"
        }
      },
      "required": [
        "destination",
        "message"
      ]
    },
    "MessageDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Was the delete action executed",
          "example": false
        },
        "moved": {
          "$ref": "#/definitions/moved"
        }
      }
    },
    "Model12": {
      "type": "object",
      "description": "Optional TLS configuration",
      "properties": {
        "rejectUnauthorized": {
          "type": "boolean",
          "description": "How to treat invalid certificates",
          "example": true
        },
        "minVersion": {
          "type": "string",
          "description": "Minimal TLS version",
          "example": "TLSv1.2",
          "maxLength": 256
        }
      }
    },
    "IMAPUpdate": {
      "type": "object",
      "description": "IMAP configuration",
      "enum": [
        false
      ],
      "properties": {
        "partial": {
          "type": "boolean",
          "description": "Set to `true` if you only want to update provided keys, by default the entire object is replaced",
          "example": false,
          "default": false
        },
        "auth": {
          "$ref": "#/definitions/Authentication"
        },
        "useAuthServer": {
          "type": "boolean",
          "description": "Set to true to use authentication server instead of username/password",
          "example": false
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "imap.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 993,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 993",
          "example": true
        },
        "tls": {
          "$ref": "#/definitions/Model12"
        },
        "resyncDelay": {
          "type": "integer",
          "description": "Full resync delay in seconds",
          "example": 900
        },
        "disabled": {
          "type": "boolean",
          "description": "Set to true to disable IMAP handling",
          "example": false
        },
        "sentMailPath": {
          "type": "string",
          "description": "Upload sent message to this folder. By default the account's Sent Mail folder is used. Set to `null` to unset.",
          "example": "Sent Mail",
          "maxLength": 1024
        },
        "draftsMailPath": {
          "type": "string",
          "description": "Folder for drafts. By default the account's Draft Mail folder is used. Set to `null` to unset.",
          "example": "Drafts",
          "maxLength": 1024
        },
        "junkMailPath": {
          "type": "string",
          "description": "Folder for spam. By default the account's Junk Mail folder is used. Set to `null` to unset.",
          "example": "Junk",
          "maxLength": 1024
        },
        "trashMailPath": {
          "type": "string",
          "description": "Folder for deleted emails. By default the account's Trash folder is used. Set to `null` to unset.",
          "example": "Trash",
          "maxLength": 1024
        },
        "archiveMailPath": {
          "type": "string",
          "description": "Folder for archived emails. By default the account's Archive folder is used. Set to `null` to unset.",
          "example": "Archive",
          "maxLength": 1024
        }
      }
    },
    "Model13": {
      "type": "object",
      "description": "Optional TLS configuration",
      "properties": {
        "rejectUnauthorized": {
          "type": "boolean",
          "description": "How to treat invalid certificates",
          "example": true
        },
        "minVersion": {
          "type": "string",
          "description": "Minimal TLS version",
          "example": "TLSv1.2",
          "maxLength": 256
        }
      }
    },
    "SMTPUpdate": {
      "type": "object",
      "description": "SMTP configuration",
      "enum": [
        false
      ],
      "properties": {
        "partial": {
          "type": "boolean",
          "description": "Set to `true` if you only want to update provided keys, by default the entire object is replaced",
          "example": false,
          "default": false
        },
        "auth": {
          "$ref": "#/definitions/Authentication"
        },
        "useAuthServer": {
          "type": "boolean",
          "description": "Set to true to use authentication server instead of username/password",
          "example": false
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "smtp.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 587,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 465",
          "example": false
        },
        "tls": {
          "$ref": "#/definitions/Model13"
        }
      }
    },
    "OAuth2Update": {
      "type": "object",
      "description": "OAuth2 configuration",
      "enum": [
        false
      ],
      "properties": {
        "partial": {
          "type": "boolean",
          "description": "Set to `true` if you only want to update provided keys, by default the entire object is replaced",
          "example": false,
          "default": false
        },
        "authorize": {
          "type": "boolean",
          "description": "Return a redirect link to the OAuth2 consent screen",
          "example": false
        },
        "provider": {
          "type": "string",
          "description": "OAuth provider",
          "example": "gmail",
          "maxLength": 256
        },
        "auth": {
          "$ref": "#/definitions/OAuth2Auth"
        },
        "accessToken": {
          "type": "string",
          "example": "ya29.a0ARrdaM8a...",
          "maxLength": 16384
        },
        "refreshToken": {
          "type": "string",
          "example": "1//09Ie3CtORQYm...",
          "maxLength": 16384
        },
        "authority": {
          "type": "string",
          "description": "Outloook account type. Either 'consumers', 'organizations', 'common' or an organizartion ID",
          "example": "consumers",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "expires": {
          "type": "string",

          "description": "Token expiration date",
          "example": "2021-03-22T13:13:31.000Z"
        }
      }
    },
    "UpdateAccount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Display name for the account",
          "example": "My Email Account",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "Default email address of the account",
          "example": "user@example.com",
          "x-format": {
            "email": true
          }
        },
        "path": {
          "$ref": "#/definitions/AccountPath"
        },
        "subconnections": {
          "$ref": "#/definitions/SubconnectionPaths"
        },
        "webhooks": {
          "type": "string",
          "description": "Account-specific webhook URL",
          "example": "https://myservice.com/imap/webhooks",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https"
              ],
              "allowRelative": false
            }
          }
        },
        "copy": {
          "type": "boolean",
          "description": "Copy submitted messages to Sent folder. Set to `null` to unset and use provider specific default.",
          "example": null
        },
        "logs": {
          "type": "boolean",
          "description": "Store recent logs",
          "example": false
        },
        "notifyFrom": {
          "type": "string",

          "description": "Send webhooks for messages starting from provided date. The default is the account creation date.",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "syncFrom": {
          "type": "string",

          "description": "Sync messages to document store starting from provided date. If not set, all emails are synced.",
          "example": "2021-07-08T07:06:34.336Z"
        },
        "proxy": {
          "type": "string",
          "description": "Proxy URL",
          "example": "socks://proxy.example.com:1080",
          "x-format": {
            "uri": {
              "scheme": [
                "http",
                "https",
                "socks",
                "scoks4",
                "socks5"
              ],
              "allowRelative": false
            }
          }
        },
        "smtpEhloName": {
          "type": "string",
          "description": "Hostname to use for the SMTP EHLO/HELO greeting",
          "example": "my.proxy.tld",
          "x-format": {
            "hostname": true
          }
        },
        "imap": {
          "$ref": "#/definitions/IMAPUpdate"
        },
        "smtp": {
          "$ref": "#/definitions/SMTPUpdate"
        },
        "oauth2": {
          "$ref": "#/definitions/OAuth2Update"
        },
        "webhooksCustomHeaders": {
          "$ref": "#/definitions/AccountWebhooksCustomHeaders"
        },
        "locale": {
          "type": "string",
          "description": "Optional locale",
          "example": "fr",
          "maxLength": 100
        },
        "tz": {
          "type": "string",
          "description": "Optional timezone",
          "example": "Europe/Tallinn",
          "maxLength": 100
        }
      }
    },
    "Model14": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        }
      },
      "required": [
        "account"
      ]
    },
    "clientId": {
      "type": "string",
      "description": "Client or Application ID for 3-legged OAuth2 applications",
      "example": "52422112755-3uov8bjwlrullq122rdm6l8ui25ho7qf.apps.googleusercontent.com",
      "enum": [
        false
      ],
      "maxLength": 256,
      "x-convert": {
        "trim": true
      }
    },
    "Model15": {
      "type": "array",
      "description": "OAuth2 Extra Scopes",
      "items": {
        "type": "string",
        "example": "User.Read",
        "maxLength": 255,
        "x-convert": {
          "trim": true
        }
      }
    },
    "Model16": {
      "type": "array",
      "description": "OAuth2 scopes to skip from the base set",
      "items": {
        "type": "string",
        "example": "SMTP.Send",
        "maxLength": 255,
        "x-convert": {
          "trim": true
        }
      }
    },
    "serviceClient": {
      "type": "string",
      "description": "Service client ID for 2-legged OAuth2 applications",
      "example": "7103296518315821565203",
      "enum": [
        false
      ],
      "maxLength": 256,
      "x-convert": {
        "trim": true
      }
    },
    "redirectUrl": {
      "type": "string",
      "description": "Redirect URL for 3-legged OAuth2 applications",
      "example": "https://myservice.com/oauth",
      "enum": [
        false
      ],
      "x-format": {
        "uri": {
          "scheme": [
            "http",
            "https"
          ],
          "allowRelative": false
        }
      }
    },
    "UpdateGateway": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Application name",
          "example": "My Gmail App",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "description": {
          "type": "string",
          "description": "Application description",
          "example": "My cool app",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "title": {
          "type": "string",
          "description": "Title for the application button",
          "example": "App title",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "Enable this app",
          "example": true
        },
        "clientId": {
          "$ref": "#/definitions/clientId"
        },
        "clientSecret": {
          "type": "string",
          "description": "Client secret for 3-legged OAuth2 applications",
          "example": "boT7Q~dUljnfFdVuqpC11g8nGMjO8kpRAv-ZB",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "baseScopes": {
          "$ref": "#/definitions/baseScopes"
        },
        "extraScopes": {
          "$ref": "#/definitions/Model15"
        },
        "skipScopes": {
          "$ref": "#/definitions/Model16"
        },
        "serviceClient": {
          "$ref": "#/definitions/serviceClient"
        },
        "serviceKey": {
          "type": "string",
          "description": "PEM formatted service secret for 2-legged OAuth2 applications",
          "example": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgk...",
          "maxLength": 102400,
          "x-convert": {
            "trim": true
          }
        },
        "authority": {
          "type": "string",
          "description": "Authorization tenant value for Outlook OAuth2 applications",
          "example": "common",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "redirectUrl": {
          "$ref": "#/definitions/redirectUrl"
        }
      }
    },
    "UpdateGatewayResponse": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "Gateway ID",
          "example": "example",
          "maxLength": 256
        }
      },
      "required": [
        "gateway"
      ]
    },
    "RequestFlush": {
      "type": "object",
      "properties": {
        "flush": {
          "type": "boolean",
          "description": "Only flush the account if true",
          "default": false
        },
        "notifyFrom": {
          "type": "string",

          "description": "Send webhooks for messages starting from provided date. The default is the account creation date.",
          "example": "2021-07-08T07:06:34.336Z",
          "default": "now"
        },
        "syncFrom": {
          "type": "string",

          "description": "Sync messages to document store starting from provided date. If not set, all emails are synced.",
          "example": "2021-07-08T07:06:34.336Z"
        }
      }
    },
    "RequestFlushResponse": {
      "type": "object",
      "properties": {
        "flush": {
          "type": "boolean",
          "description": "Flush status",
          "default": false
        }
      }
    },
    "RequestReconnect": {
      "type": "object",
      "properties": {
        "reconnect": {
          "type": "boolean",
          "description": "Only reconnect if true",
          "default": false
        }
      }
    },
    "RequestReconnectResponse": {
      "type": "object",
      "properties": {
        "reconnect": {
          "type": "boolean",
          "description": "Reconnection status",
          "default": false
        }
      }
    },
    "RequestSync": {
      "type": "object",
      "properties": {
        "sync": {
          "type": "boolean",
          "description": "Only sync if true",
          "default": false
        }
      }
    },
    "RequestSyncResponse": {
      "type": "object",
      "properties": {
        "sync": {
          "type": "boolean",
          "description": "Sync status",
          "default": false
        }
      }
    },
    "TargetMailboxPath": {
      "type": "array",
      "description": "New mailbox path as an array or a string. If account is namespaced then namespace prefix is added by default.",
      "example": [
        "Parent folder",
        "Subfolder"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 256
      }
    },
    "RenameMailbox": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Mailbox folder path to rename",
          "example": "Previous Mail"
        },
        "newPath": {
          "$ref": "#/definitions/TargetMailboxPath"
        }
      },
      "required": [
        "path"
      ]
    },
    "RenameMailboxResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Mailbox folder path to rename",
          "example": "Previous Mail"
        },
        "newPath": {
          "type": "string",
          "description": "Full path to mailbox",
          "example": "Kalender/S&APw-nnip&AOQ-evad"
        },
        "renamed": {
          "type": "boolean",
          "description": "Was the mailbox renamed",
          "example": true
        }
      },
      "required": [
        "path",
        "newPath"
      ]
    },
    "AddFlags": {
      "type": "array",
      "description": "Add new flags",
      "example": [
        "\\Seen"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "DeleteFlags": {
      "type": "array",
      "description": "Delete specific flags",
      "example": [
        "\\Flagged"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "SetFlags": {
      "type": "array",
      "description": "Override all flags",
      "example": [
        "\\Seen",
        "\\Flagged"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "FlagUpdate": {
      "type": "object",
      "description": "Flag updates",
      "properties": {
        "add": {
          "$ref": "#/definitions/AddFlags"
        },
        "delete": {
          "$ref": "#/definitions/DeleteFlags"
        },
        "set": {
          "$ref": "#/definitions/SetFlags"
        }
      }
    },
    "AddLabels": {
      "type": "array",
      "description": "Add new labels",
      "example": [
        "Some label"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "DeleteLabels": {
      "type": "array",
      "description": "Delete specific labels",
      "example": [
        "Some label"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "SetLabels": {
      "type": "array",
      "description": "Override all labels",
      "example": [
        "First label",
        "Second label"
      ],
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "LabelUpdate": {
      "type": "object",
      "description": "Label updates",
      "properties": {
        "add": {
          "$ref": "#/definitions/AddLabels"
        },
        "delete": {
          "$ref": "#/definitions/DeleteLabels"
        },
        "set": {
          "$ref": "#/definitions/SetLabels"
        }
      }
    },
    "MessageUpdate": {
      "type": "object",
      "properties": {
        "flags": {
          "$ref": "#/definitions/FlagUpdate"
        },
        "labels": {
          "$ref": "#/definitions/LabelUpdate"
        }
      }
    },
    "MessagesUpdateRequest": {
      "type": "object",
      "properties": {
        "search": {
          "$ref": "#/definitions/SearchQuery"
        },
        "update": {
          "$ref": "#/definitions/MessageUpdate"
        }
      },
      "required": [
        "search"
      ]
    },
    "FlagResponse": {
      "type": "object",
      "properties": {
        "add": {
          "type": "boolean",
          "example": true
        },
        "delete": {
          "type": "boolean",
          "example": false
        },
        "set": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "MessageUpdateResponse": {
      "type": "object",
      "properties": {
        "flags": {
          "$ref": "#/definitions/FlagResponse"
        },
        "labels": {
          "$ref": "#/definitions/FlagResponse"
        }
      }
    },
    "Model17": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Account Name",
          "example": "John Smith",
          "maxLength": 256
        },
        "user": {
          "type": "string",
          "maxLength": 1024,
          "x-convert": {
            "trim": true
          }
        },
        "pass": {
          "type": "string",
          "maxLength": 1024
        },
        "host": {
          "type": "string",
          "description": "Hostname to connect to",
          "example": "smtp.gmail.com",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "Service port number",
          "example": 465,
          "minimum": 1,
          "maximum": 65536
        },
        "secure": {
          "type": "boolean",
          "description": "Should connection use TLS. Usually true for port 465",
          "example": true
        }
      }
    },
    "SettingsPutQueuePayload": {
      "type": "object",
      "properties": {
        "paused": {
          "type": "boolean",
          "description": "Set queue state to paused",
          "example": false
        }
      }
    },
    "SettingsPutQueueResponse": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/queue"
        },
        "paused": {
          "type": "boolean",
          "description": "Is the queue paused or not",
          "example": false
        }
      },
      "required": [
        "queue"
      ]
    },
    "UpdateTemplateContent": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "Message subject",
          "example": "What a wonderful message",
          "maxLength": 10240,
          "x-convert": {
            "trim": true
          }
        },
        "text": {
          "type": "string",
          "description": "Message Text",
          "example": "Hello from myself!",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "html": {
          "type": "string",
          "description": "Message HTML",
          "example": "<p>Hello from myself!</p>",
          "maxLength": 5242880,
          "x-convert": {
            "trim": true
          }
        },
        "previewText": {
          "type": "string",
          "description": "Preview text appears in the inbox after the subject line",
          "example": "Welcome to our newsletter!",
          "maxLength": 1024
        }
      }
    },
    "UpdateTemplate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the template",
          "example": "Transaction receipt",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Optional description of the template",
          "example": "Something about the template",
          "maxLength": 1024
        },
        "format": {
          "$ref": "#/definitions/format"
        },
        "content": {
          "$ref": "#/definitions/UpdateTemplateContent"
        }
      }
    },
    "UpdateTemplateResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "type": "boolean",
          "description": "Was the template updated or not"
        },
        "account": {
          "type": "string",
          "description": "Account ID",
          "example": "example",
          "maxLength": 256,
          "x-convert": {
            "trim": true
          }
        },
        "id": {
          "type": "string",
          "description": "Template ID",
          "example": "example",
          "maxLength": 256
        }
      },
      "required": [
        "account",
        "id"
      ]
    },
    "MessagesDeleteRequest": {
      "type": "object",
      "properties": {
        "search": {
          "$ref": "#/definitions/SearchQuery"
        }
      },
      "required": [
        "search"
      ]
    },
    "Model18": {
      "type": "array",
      "x-constraint": {
        "length": 2
      },
      "items": {
        "type": "string",
        "description": "Message ID",
        "maxLength": 256
      }
    },
    "idMap": {
      "type": "array",
      "description": "An optional map of source and target ID values, if the server provided this info",
      "example": [
        [
          "AAAAAQAACnA",
          "AAAAAwAAAD4"
        ]
      ],
      "items": {
        "$ref": "#/definitions/Model18"
      }
    },
    "Model19": {
      "type": "object",
      "description": "Present if messages were moved to Trash",
      "properties": {
        "destination": {
          "type": "string",
          "description": "Trash folder path",
          "example": "Trash"
        },
        "idMap": {
          "$ref": "#/definitions/idMap"
        }
      },
      "required": [
        "destination"
      ]
    },
    "MessagesDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Was the delete action executed",
          "example": false
        },
        "moved": {
          "$ref": "#/definitions/Model19"
        }
      }
    },
    "MessagesMoveRequest": {
      "type": "object",
      "properties": {
        "search": {
          "$ref": "#/definitions/SearchQuery"
        },
        "path": {
          "type": "string",
          "description": "Target mailbox folder path",
          "example": "INBOX"
        }
      },
      "required": [
        "search",
        "path"
      ]
    },
    "Model20": {
      "type": "array",
      "x-constraint": {
        "length": 2
      },
      "items": {
        "type": "string",
        "description": "Message ID",
        "maxLength": 256
      }
    },
    "Model21": {
      "type": "array",
      "description": "An optional map of source and target ID values, if the server provided this info",
      "example": [
        [
          "AAAAAQAACnA",
          "AAAAAwAAAD4"
        ]
      ],
      "items": {
        "$ref": "#/definitions/Model20"
      }
    },
    "MessagesMoveResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Target mailbox folder path",
          "example": "INBOX"
        },
        "idMap": {
          "$ref": "#/definitions/Model21"
        }
      },
      "required": [
        "path"
      ]
    },
    "MessageMove": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Target mailbox folder path",
          "example": "INBOX"
        }
      },
      "required": [
        "path"
      ]
    },
    "MessageMoveResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Target mailbox folder path",
          "example": "INBOX"
        },
        "id": {
          "type": "string",
          "description": "Message ID",
          "example": "AAAAAQAACnA",
          "maxLength": 256
        },
        "uid": {
          "type": "integer",
          "description": "UID of moved message",
          "example": 12345
        }
      },
      "required": [
        "path",
        "id"
      ]
    }
  }
}