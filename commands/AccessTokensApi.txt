/*
 * EmailEngine
 * You will need an Access Token to use this API (generate one <a href=\"/admin/tokens\" target=\"_parent\">here</a>).  When making API calls remember that requests against the same account are queued and not executed in parallel. If a previous request takes too much time to finish, a queued request might time out before EmailEngine can run it.
 *
 * The version of the OpenAPI document: 2.42.0
 * Contact: info@emailengine.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsTokensResponse;
import org.openapitools.client.model.CreateToken;
import org.openapitools.client.model.CreateTokenResponse;
import org.openapitools.client.model.DeleteTokenRequestResponse;
import org.openapitools.client.model.RootTokensResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessTokensApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessTokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessTokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV1TokenToken
     * @param token Access token (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV1TokenTokenCall(String token, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/token/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV1TokenTokenValidateBeforeCall(String token, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteV1TokenToken(Async)");
        }

        return deleteV1TokenTokenCall(token, xEeTimeout, _callback);

    }

    /**
     * Remove a token
     * Delete an access token
     * @param token Access token (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return DeleteTokenRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTokenRequestResponse deleteV1TokenToken(String token, Integer xEeTimeout) throws ApiException {
        ApiResponse<DeleteTokenRequestResponse> localVarResp = deleteV1TokenTokenWithHttpInfo(token, xEeTimeout);
        return localVarResp.getData();
    }

    /**
     * Remove a token
     * Delete an access token
     * @param token Access token (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return ApiResponse&lt;DeleteTokenRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteTokenRequestResponse> deleteV1TokenTokenWithHttpInfo(String token, Integer xEeTimeout) throws ApiException {
        okhttp3.Call localVarCall = deleteV1TokenTokenValidateBeforeCall(token, xEeTimeout, null);
        Type localVarReturnType = new TypeToken<DeleteTokenRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a token (asynchronously)
     * Delete an access token
     * @param token Access token (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV1TokenTokenAsync(String token, Integer xEeTimeout, final ApiCallback<DeleteTokenRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV1TokenTokenValidateBeforeCall(token, xEeTimeout, _callback);
        Type localVarReturnType = new TypeToken<DeleteTokenRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV1Tokens
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1TokensCall(Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV1TokensValidateBeforeCall(Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        return getV1TokensCall(xEeTimeout, _callback);

    }

    /**
     * List root tokens
     * Lists access tokens registered for root access
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return RootTokensResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public RootTokensResponse getV1Tokens(Integer xEeTimeout) throws ApiException {
        ApiResponse<RootTokensResponse> localVarResp = getV1TokensWithHttpInfo(xEeTimeout);
        return localVarResp.getData();
    }

    /**
     * List root tokens
     * Lists access tokens registered for root access
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return ApiResponse&lt;RootTokensResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RootTokensResponse> getV1TokensWithHttpInfo(Integer xEeTimeout) throws ApiException {
        okhttp3.Call localVarCall = getV1TokensValidateBeforeCall(xEeTimeout, null);
        Type localVarReturnType = new TypeToken<RootTokensResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List root tokens (asynchronously)
     * Lists access tokens registered for root access
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1TokensAsync(Integer xEeTimeout, final ApiCallback<RootTokensResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV1TokensValidateBeforeCall(xEeTimeout, _callback);
        Type localVarReturnType = new TypeToken<RootTokensResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV1TokensAccountAccount
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1TokensAccountAccountCall(String account, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tokens/account/{account}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV1TokensAccountAccountValidateBeforeCall(String account, Integer xEeTimeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getV1TokensAccountAccount(Async)");
        }

        return getV1TokensAccountAccountCall(account, xEeTimeout, _callback);

    }

    /**
     * List account tokens
     * Lists access tokens registered for an account
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return AccountsTokensResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public AccountsTokensResponse getV1TokensAccountAccount(String account, Integer xEeTimeout) throws ApiException {
        ApiResponse<AccountsTokensResponse> localVarResp = getV1TokensAccountAccountWithHttpInfo(account, xEeTimeout);
        return localVarResp.getData();
    }

    /**
     * List account tokens
     * Lists access tokens registered for an account
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @return ApiResponse&lt;AccountsTokensResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsTokensResponse> getV1TokensAccountAccountWithHttpInfo(String account, Integer xEeTimeout) throws ApiException {
        okhttp3.Call localVarCall = getV1TokensAccountAccountValidateBeforeCall(account, xEeTimeout, null);
        Type localVarReturnType = new TypeToken<AccountsTokensResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List account tokens (asynchronously)
     * Lists access tokens registered for an account
     * @param account Account ID (required)
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV1TokensAccountAccountAsync(String account, Integer xEeTimeout, final ApiCallback<AccountsTokensResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV1TokensAccountAccountValidateBeforeCall(account, xEeTimeout, _callback);
        Type localVarReturnType = new TypeToken<AccountsTokensResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV1Token
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1TokenCall(Integer xEeTimeout, CreateToken body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEeTimeout != null) {
            localVarHeaderParams.put("x-ee-timeout", localVarApiClient.parameterToString(xEeTimeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"*/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV1TokenValidateBeforeCall(Integer xEeTimeout, CreateToken body, final ApiCallback _callback) throws ApiException {
        return postV1TokenCall(xEeTimeout, body, _callback);

    }

    /**
     * Provision an access token
     * Provisions a new access token for an account
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return CreateTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public CreateTokenResponse postV1Token(Integer xEeTimeout, CreateToken body) throws ApiException {
        ApiResponse<CreateTokenResponse> localVarResp = postV1TokenWithHttpInfo(xEeTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Provision an access token
     * Provisions a new access token for an account
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;CreateTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTokenResponse> postV1TokenWithHttpInfo(Integer xEeTimeout, CreateToken body) throws ApiException {
        okhttp3.Call localVarCall = postV1TokenValidateBeforeCall(xEeTimeout, body, null);
        Type localVarReturnType = new TypeToken<CreateTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provision an access token (asynchronously)
     * Provisions a new access token for an account
     * @param xEeTimeout Override the &#x60;EENGINE_TIMEOUT&#x60; environment variable for a single API request (in milliseconds) (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV1TokenAsync(Integer xEeTimeout, CreateToken body, final ApiCallback<CreateTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV1TokenValidateBeforeCall(xEeTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<CreateTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
